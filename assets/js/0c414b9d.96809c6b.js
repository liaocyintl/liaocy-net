"use strict";(self.webpackChunkliaocy_net=self.webpackChunkliaocy_net||[]).push([[4043],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(f,s(s({ref:n},c),{},{components:t})):a.createElement(f,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1041:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=t(87462),r=t(63366),l=(t(67294),t(3905)),s=["components"],o={title:"Laravel\u547d\u4ee4\u5feb\u67e5",date:new Date("2019-02-18T12:54:00.000Z"),lang:"zh-Hans",tags:["PHP","Laravel"],categories:["\u5f00\u53d1 Development","PHP"]},i=void 0,p={unversionedId:"archieved/2019/02/laravel",id:"archieved/2019/02/laravel",title:"Laravel\u547d\u4ee4\u5feb\u67e5",description:"\u5fc3\u8840\u6765\u6f6e\u5b66\u4e86\u4e00\u4e0bLaravel\uff0c\u672c\u6587\u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u7684Laravel\u8bed\u6cd5\u3002",source:"@site/docs/archieved/2019/02/18-laravel.md",sourceDirName:"archieved/2019/02",slug:"/archieved/2019/02/laravel",permalink:"/liaocy-net/docs/archieved/2019/02/laravel",draft:!1,editUrl:"https://github.com/liaocyintl/liaocy-net/tree/main/docs/archieved/2019/02/18-laravel.md",tags:[{label:"PHP",permalink:"/liaocy-net/docs/tags/php"},{label:"Laravel",permalink:"/liaocy-net/docs/tags/laravel"}],version:"current",sidebarPosition:18,frontMatter:{title:"Laravel\u547d\u4ee4\u5feb\u67e5",date:"2019-02-18T12:54:00.000Z",lang:"zh-Hans",tags:["PHP","Laravel"],categories:["\u5f00\u53d1 Development","PHP"]},sidebar:"tutorialSidebar",previous:{title:"\u5728Ubuntu\u8bbe\u7f6e\u5b88\u62a4\u8fdb\u7a0bsystemd\uff08\u4f8b\uff1a\u540e\u53f0\u542f\u52a8JupyterHub\uff09",permalink:"/liaocy-net/docs/archieved/2019/01/ubuntusystemd"},next:{title:"CentOS\u8bbe\u7f6eApache\u7684HTTP\u4e0eHTTPS\u53cd\u5411\u4ee3\u7406",permalink:"/liaocy-net/docs/archieved/2019/03/centosapacheproxy"}},c={},u=[{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2},{value:"Database and Eloquent",id:"database-and-eloquent",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u5fc3\u8840\u6765\u6f6e\u5b66\u4e86\u4e00\u4e0bLaravel\uff0c\u672c\u6587\u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u7684Laravel\u8bed\u6cd5\u3002"),(0,l.kt)("h2",{id:"\u53c2\u8003\u8d44\u6599"},"\u53c2\u8003\u8d44\u6599"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://laravelacademy.org/laravel-5_7"},"Laravel 5.7 \u6587\u6863"))),(0,l.kt)("h2",{id:"database-and-eloquent"},"Database and Eloquent"),(0,l.kt)("p",null,"\u5efa\u7acb\u6570\u636e\u5e93\u8fc1\u79fb\u6587\u4ef6\uff1a\nphp artisan make:migration flight --create=flight"),(0,l.kt)("p",null,"\u540c\u65f6\u5efa\u7acb\u6a21\u578b\u548c\u6570\u636e\u5e93\u8fc1\u79fb\u6587\u4ef6\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Flight --migration\nphp artisan make:model Flight -m\n")),(0,l.kt)("p",null,"\u5efa\u8868\uff1a ",(0,l.kt)("a",{parentName:"p",href:"https://laravel.com/api/5.7/Illuminate/Database/Schema/Blueprint.html"},"Blueprint")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"Schema::create('users', function (Blueprint $table) {\n    $table->increments('id');\n    $table->string('name');\n    $table->string('email')->unique();\n    $table->timestamp('email_verified_at')->nullable();\n    $table->string('password');\n    $table->rememberToken();\n    $table->timestamps();\n    // forengn key\n    $table->foreign('user_id')->references('id')->on('users');   \n});\n")),(0,l.kt)("p",null,"\u4fee\u6539\u8868\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"Schema::table('users', function (Blueprint $table) {\n    $table->string('nickname', 100)->after('name')->nullable()->comment('\u7528\u6237\u6635\u79f0');\n    // index\n    $table->primary('id');\n    $table->index('name');\n    $table->unique('email');\n});\n")),(0,l.kt)("p",null,"\u6267\u884c\u8fc1\u79fb\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan migrate\n")),(0,l.kt)("p",null,"\u751f\u6210\u586b\u5145\u5668\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:seeder UsersTableSeeder\n")),(0,l.kt)("p",null,"\u7f16\u5199\u586b\u5145\u5668\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"DB::table('users')->insert([\n    'name' => str_random(10),\n    'email' => str_random(10).'@gmail.com',\n    'password' => bcrypt('secret'),\n]);\n")),(0,l.kt)("p",null,"\u586b\u5145\u6570\u636e\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan db:seed --class=UsersTableSeeder\n")),(0,l.kt)("p",null,"\u539f\u751fSQL\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"//\u589e\u52a0\n$name = str_random(10);\n$email = str_random(10) . '@163.com';\n$password = bcrypt('secret');\n$flag = DB::insert('insert into `users` (`name`, `email`, `password`) values (?, ?, ?)', [$name, $email, $password]);\n\n//\u5220\u9664\n$id = 8;\n$affectedRows = DB::delete('delete from `users` where id = ?', [$id]);\n\n//\u4fee\u6539\n$name = str_random(8);\n$id = 8;\n$affectedRows = DB::update('update `users` set `name` = ? where id = ?', [$name, $id]);\n\n//\u67e5\u8be2\n$name = '\u5b66\u9662\u541b';\n$users = DB::select('select * from `users` where `name` = ?', [$name]);\n")),(0,l.kt)("p",null,"SQL\u6784\u5efa\u5668\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"//\u589e\u52a0\n$userId = DB::table('users')->insertGetId([\n    'name' => str_random(10),\n    'email' => str_random(8) . '@qq.com',\n    'password' => bcrypt('secret')\n]);\n\n//\u5220\u9664\n$affectedRows = DB::table('users')->delete();\n$affectedRows = DB::table('users')->truncate(); //\u91cd\u5236ID\n\n//\u4fee\u6539\n$id = 11;\n$affectedRows = DB::table('users')->where('id', '>', $id)->update(['name' => str_random(8)]);\n\n//\u67e5\u8be2\n$name = '\u5b66\u9662\u541b';\n$users = DB::table('users')->select('id', 'name', 'email')->where('name', $name)->get();\nDB::table('posts')->where('views', 0)->get();      # \u6b64\u5904\u7b49\u53f7\u53ef\u4ee5\u7701\u7565\nDB::table('posts')->where('views', '>', 0)->get();  \nDB::table('posts')->where('views', '<>', 0)->get();\n// - and\nDB::table('posts')->where([\n    ['id', '<', 10],\n    ['views', '>', 0]\n])->get();\n// - or\nDB::table('posts')->where('id', '<', 10)->orWhere('views', '>', 0)->get();\n")),(0,l.kt)("p",null,"\u5efa\u7acb\u6a21\u578b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Post\n")),(0,l.kt)("p",null,"ORM\u6620\u5c04\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"class Post extends Model\n{\n    // \u8868\u540d\n    protected $table = 'post';\n    // \u662f\u5426\u5305\u542b\u81ea\u589eID\n    protected $incrementing = True;\n    // \u4e3b\u952e\u503c\u7c7b\u578b\n    protected $keyType = int;\n\n    // \u662f\u5426\u521b\u5efa 'created_at' and 'updated_at' timestamps \n    public $timestamps = True;\n\n    // Customize names of 'created_at' and 'updated_at'\n    const CREATED_AT = 'created_at';\n    const UPDATED_AT = 'updated_at';\n\n    // Customize database link in config/database.php\n    // protected $connection = 'mysql';\n\n    //UNIX\u65f6\u95f4\u6233\n    protected $dateFormat = 'U';\n}\n")),(0,l.kt)("p",null,"ORM\u67e5\u8be2\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"//\u63d2\u5165\n$post = new App\\Post;\n$post->title = '\u6d4b\u8bd5\u6587\u7ae0\u6807\u9898';\n$post->content = '\u6d4b\u8bd5\u6587\u7ae0\u5185\u5bb9';\n$post->user_id = 1;\n$post->save();\n\n//\u5220\u9664\n$post = Post::find(31);\n$post->delete();\n\n//\u4fee\u6539\n$post = Post::find(31);\n$post->title = '\u6d4b\u8bd5\u6587\u7ae0\u6807\u9898\u66f4\u65b0';\n$post->save();\n\n//\u67e5\u8be2\n$posts = Post:all();\n// - chunk\u5206\u5757\nPost::chunk(10, function ($posts) {\n   foreach ($posts as $post) {\n       if ($post->views == 0) {\n           continue;\n       } else {\n           dump($post->title . ':' . $post->views);\n       }\n   }\n});\n// - Lazy\u67e5\u8be2\nforeach (Post::cursor() as $post) {\n    dump($post->title . ':' . $post->content);\n}\n\n")))}m.isMDXComponent=!0}}]);