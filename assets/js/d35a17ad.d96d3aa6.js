"use strict";(self.webpackChunkliaocy_net=self.webpackChunkliaocy_net||[]).push([[6756],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,k=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return t?a.createElement(k,r(r({ref:n},d),{},{components:t})):a.createElement(k,r({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},28142:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=t(87462),i=t(63366),o=(t(67294),t(3905)),r=["components"],s={title:"\u3010\u7ffb\u8bd1\u3011\u8c37\u6b4cPython\u98ce\u683c\u6307\u5357\uff08\u7ffb\u8bd1\u4e2d\uff09",date:new Date("2021-08-04T14:30:00.000Z"),lang:"CN-ZH",tags:["Python","Google"],categories:["\u5f00\u53d1 Development","Python"]},l=void 0,p={unversionedId:"archieved/2021/08/pyguide",id:"archieved/2021/08/pyguide",title:"\u3010\u7ffb\u8bd1\u3011\u8c37\u6b4cPython\u98ce\u683c\u6307\u5357\uff08\u7ffb\u8bd1\u4e2d\uff09",description:"\u672c\u6587\u7ffb\u8bd1\u81eaGoogle Python Style Guide\uff0c\u8bf7\u52ff\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u3002",source:"@site/docs/archieved/2021/08/04-pyguide.md",sourceDirName:"archieved/2021/08",slug:"/archieved/2021/08/pyguide",permalink:"/liaocy-net/docs/archieved/2021/08/pyguide",draft:!1,editUrl:"https://github.com/liaocyintl/liaocy-net/tree/main/docs/archieved/2021/08/04-pyguide.md",tags:[{label:"Python",permalink:"/liaocy-net/docs/tags/python"},{label:"Google",permalink:"/liaocy-net/docs/tags/google"}],version:"current",sidebarPosition:4,frontMatter:{title:"\u3010\u7ffb\u8bd1\u3011\u8c37\u6b4cPython\u98ce\u683c\u6307\u5357\uff08\u7ffb\u8bd1\u4e2d\uff09",date:"2021-08-04T14:30:00.000Z",lang:"CN-ZH",tags:["Python","Google"],categories:["\u5f00\u53d1 Development","Python"]},sidebar:"tutorialSidebar",previous:{title:"\u7edf\u8ba1\u5b66\u5e38\u7528\u516c\u5f0f\u6c47\u603b",permalink:"/liaocy-net/docs/archieved/2020/05/statistics-formula"},next:{title:"Awesome Computer Vision",permalink:"/liaocy-net/docs/archieved/awesome/cv"}},d={},m=[{value:"from __future__ imports",id:"from-__future__-imports",level:5},{value:"The six, future, and past libraries",id:"the-six-future-and-past-libraries",level:5}],c={toc:m};function u(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u672c\u6587\u7ffb\u8bd1\u81ea",(0,o.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/pyguide.html"},"Google Python Style Guide"),"\uff0c\u8bf7\u52ff\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u3002"),(0,o.kt)("h1",{id:"\u8c37\u6b4cpython\u98ce\u683c\u6307\u5357"},"\u8c37\u6b4cPython\u98ce\u683c\u6307\u5357"),(0,o.kt)("a",{id:"s1-background"}),(0,o.kt)("a",{id:"1-background"}),(0,o.kt)("a",{id:"background"}),"## 1 \u80cc\u666f",(0,o.kt)("p",null,"Python\u662f\u8c37\u6b4c\u4f7f\u7528\u7684\u4e00\u79cd\u4e3b\u8981\u7684\u52a8\u6001\u8bed\u8a00\uff0c\u672c\u89c4\u8303\u901a\u8fc7\u5217\u51fa\u6b63\u8bef\u4f8b\u5b50\uff0c\u6765\u5e2e\u52a9\u4f60\u4ee5\u6b63\u786e\u7684\u683c\u5f0f\u7f16\u5199Python\u4ee3\u7801\u3002\n\u6211\u4eec\u4e3aVim\u521b\u5efa\u4e86\u4e00\u4e2a",(0,o.kt)("a",{parentName:"p",href:"google_python_style.vim"},"\u914d\u7f6e\u6587\u4ef6"),"\u3002\n\u5bf9\u4e8eEmacs\u800c\u8a00\uff0c\u7528\u5b83\u672c\u6765\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,o.kt)("p",null,"\u4e5f\u6709\u5f88\u591a\u56e2\u961f\u4f7f\u7528",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google/yapf/"},"yapf"),"\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u6765\u907f\u514d\u683c\u5f0f\u4e89\u8bae\u3002"),(0,o.kt)("a",{id:"s2-python-language-rules"}),(0,o.kt)("a",{id:"2-python-language-rules"}),(0,o.kt)("a",{id:"python-language-rules"}),"## 2 Python\u8bed\u8a00\u89c4\u5219",(0,o.kt)("a",{id:"s2.1-lint"}),(0,o.kt)("a",{id:"21-lint"}),(0,o.kt)("a",{id:"lint"}),"### 2.1 Lint",(0,o.kt)("p",null,"\u4f7f\u7528",(0,o.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/pylintrc"},"pylintrc"),"\uff0c\u5728\u4f60\u7684\u4ee3\u7801\u4e0a\u8fd0\u884c",(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u3002"),(0,o.kt)("a",{id:"s2.1.1-definition"}),(0,o.kt)("a",{id:"211-definition"}),(0,o.kt)("a",{id:"lint-definition"}),"#### 2.1.1 \u5b9a\u4e49",(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u662f\u4e00\u4e2a\u7528\u6765\u53d1\u73b0Python\u6e90\u4ee3\u7801\u4e2d\u7684Bug\u548c\u683c\u5f0f\u95ee\u9898\u7684\u5de5\u5177\u3002\n\u5b83\u53ef\u4ee5\u627e\u5230\u90a3\u4e9b\u5178\u578b\u7684\u975e\u52a8\u6001\u8bed\u8a00\uff0c\u4f8b\u5982C\u548cC++\uff0c\u7684\u7f16\u8bd1\u5668\u624d\u80fd\u6355\u6349\u5230\u7684\u95ee\u9898\u3002\n\u6bd5\u7adf\u7531\u4e8ePython\u662f\u4e00\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\uff08\u5b83\u7ed9\u51fa\uff09\u7684\u4e00\u4e9b\u8b66\u544a\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\n\u4f46\u662f\u8fd9\u4e9b\u8bef\u62a5\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002"),(0,o.kt)("a",{id:"s2.1.2-pros"}),(0,o.kt)("a",{id:"212-pros"}),(0,o.kt)("a",{id:"lint-pros"}),"#### 2.1.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u6355\u83b7\u5bb9\u6613\u51fa\u73b0\u7684\u9519\u8bef\uff0c\u5982\u62fc\u5199\u9519\u8bef\u3001\u8d4b\u503c\u524d\u4f7f\u7528\u53d8\u91cf\u7b49\u3002"),(0,o.kt)("a",{id:"s2.1.3-cons"}),(0,o.kt)("a",{id:"213-cons"}),(0,o.kt)("a",{id:"lint-cons"}),"#### 2.1.3 \u7f3a\u70b9",(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u5e76\u4e0d\u5b8c\u7f8e\u3002\u4e3a\u4e86\u5229\u7528\u5b83\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u8fce\u5408\u5b83\u6765\u5199\u4ee3\u7801\uff0c\u6291\u5236\u5176\u8b66\u544a\u6216\u4fee\u590d\u5b83\u3002"),(0,o.kt)("a",{id:"s2.1.4-decision"}),(0,o.kt)("a",{id:"214-decision"}),(0,o.kt)("a",{id:"lint-decision"}),"#### 2.1.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u8bf7\u786e\u4fdd\u4f60\u5728\u4f60\u7684\u4ee3\u7801\u4e0a\u6267\u884c\u4e86",(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u53d1\u73b0\u8bef\u62a5\uff0c\u5219\u53d6\u6d88\u8be5\u8b66\u544a\uff0c\u4ee5\u514d\u9057\u6f0f\u5176\u4ed6\u8b66\u544a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dict = 'something awful'  # Bad Idea... pylint: disable=redefined-builtin\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u7684\u6bcf\u4e2a\u8b66\u544a\u90fd\u7531\u7b26\u53f7\u540d\u79f0\u6807\u8bc6\uff08",(0,o.kt)("inlineCode",{parentName:"p"},"empty-docstring"),"\uff09\u3002\n\u8c37\u6b4c\u7279\u5b9a\u7684\u8b66\u544a\u5219\u7531",(0,o.kt)("inlineCode",{parentName:"p"},"g-"),"\u5f00\u5934\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u65e0\u6cd5\u6d88\u9664\u8fd9\u4e9b\u8b66\u544a\uff0c\u8bf7\u6dfb\u52a0\u4e00\u4e2a\u6ce8\u91ca\u8bf4\u660e\u3002"),(0,o.kt)("p",null,"\u4ee5\u8fd9\u79cd\u6291\u5236\u8b66\u544a\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u641c\u7d22\u6291\u5236\u6389\u7684\u8b66\u544a\u5e76\u91cd\u65b0\u5ba1\u89c6\u5b83\u4eec\u3002"),(0,o.kt)("p",null,"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5217\u51fa",(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\u7684\u8b66\u544a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pylint --list-msgs\n")),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u5f97\u5230\u7279\u5b9a\u8b66\u544a\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pylint --help-msg=C6409\n")),(0,o.kt)("p",null,"\u6211\u4eec\u66f4\u504f\u7231",(0,o.kt)("inlineCode",{parentName:"p"},"pylint: disable"),"\u800c\u4e0d\u662f\u5df2\u7ecf\u8fc7\u65f6\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"pylint: disable-msg"),"\u3002"),(0,o.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u5f00\u59cb\u5904\u5220\u9664\u591a\u4f59\u7684\u53d8\u91cf\uff08\u7528del\u91ca\u653e\u6389\u591a\u4f59\u7684\u53d8\u91cf\uff09\u6765\u6291\u5236\u672a\u4f7f\u7528\u53c2\u6570\u7684\u8b66\u544a\u3002\n\u8bf7\u7559\u4e0b\u4e00\u4e2a\u8bf4\u660e\u544a\u8bc9\u6211\u4eec\u4f60\u4e3a\u4ec0\u4e48\u5220\u6389\u4e86\u5b83\u3002\n\u4ec5\u4ec5\u6ce8\u91ca\u201c\u6ca1\u7528\u201d\u5c31\u8db3\u591f\u4e86\u3002"),(0,o.kt)("p",null,"\u4f8b\u5982\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def viking_cafe_order(spam: str, beans: str, eggs: Optional[str] = None) -> str:\n    del beans, eggs  # \u6ca1\u7528 by vikings.\n    return spam + spam + spam\n")),(0,o.kt)("p",null,"\u5176\u4ed6\u8fd8\u6709\u4e00\u4e9b\u6291\u5236\u8b66\u544a\u7684\u5e38\u89c1\u7684\u5f62\u5f0f\u3002\n\u5305\u62ec\u4f7f\u7528'",(0,o.kt)("inlineCode",{parentName:"p"},"_"),"'\u4f5c\u4e3a\u672a\u7528\u53c2\u6570\u7684\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u7ed9\u672a\u4f7f\u7528\u53c2\u6570\u9644\u4e0a'",(0,o.kt)("inlineCode",{parentName:"p"},"unused_"),"'\u7684\u524d\u7f00\uff0c\u6216\u8005\u628a\u4ed6\u4eec\u8d4b\u503c\u5230'",(0,o.kt)("inlineCode",{parentName:"p"},"_"),"'\u3002\n\u8fd9\u4e9b\u5f62\u5f0f\u53ef\u4ee5\u7528\uff0c\u4f46\u662f\u4e0d\u9f13\u52b1\u3002\n\u4ed6\u4eec\u901a\u8fc7\u540d\u79f0\u4f20\u9012\u53c2\u6570\uff0c\u4f46\u5e76\u4e0d\u5f3a\u5236\u8981\u6c42\u53c2\u6570\u5fc5\u987b\u5b9e\u9645\u4f7f\u7528\u3002"),(0,o.kt)("a",{id:"s2.2-imports"}),(0,o.kt)("a",{id:"22-imports"}),(0,o.kt)("a",{id:"imports"}),"### 2.2 \u5f15\u7528 Import",(0,o.kt)("p",null,"\u53ea\u5728\u5305\uff08packages\uff09\u548c\u6a21\u5757\uff08modules\uff09\u4e0a\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"import"),"\uff0c\u800c\u4e0d\u8981\u628a",(0,o.kt)("inlineCode",{parentName:"p"},"import"),"\u7528\u4e8e\u7c7b\u548c\u51fd\u6570\u3002\n\u4f46\u4ece",(0,o.kt)("a",{parentName:"p",href:"#typing-imports"},"typing module"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/python/typing/tree/master/typing_extensions"},"typing_extensions module"),"\uff0c\n\u548c",(0,o.kt)("a",{parentName:"p",href:"https://six.readthedocs.io/#module-six.moves"},"six.moves module"),"\u5f15\u7528\u662f\u4e0d\u53d7\u6b21\u89c4\u5219\u9650\u5236\u3002"),(0,o.kt)("a",{id:"s2.2.1-definition"}),(0,o.kt)("a",{id:"221-definition"}),(0,o.kt)("a",{id:"imports-definition"}),"#### 2.2.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u63d0\u4f9b\u4e00\u79cd\u4ece\u4e00\u4e2a\u6a21\u5757\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u53ef\u91cd\u7528\u7684\u5171\u4eab\u4ee3\u7801\u673a\u5236\u3002"),(0,o.kt)("a",{id:"s2.2.2-pros"}),(0,o.kt)("a",{id:"222-pros"}),(0,o.kt)("a",{id:"imports-pros"}),"#### 2.2.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u547d\u540d\u7a7a\u95f4\u7ba1\u7406\u7684\u89c4\u5219\u4f1a\u53d8\u5f97\u5f88\u7b80\u5355\u3002\n\u6bcf\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\u6765\u6e90\u90fd\u53ef\u4ee5\u6309\u7167\u56fa\u5b9a\u7684\u89c4\u5219\u8868\u793a\u3002\n\u4f8b\u5982",(0,o.kt)("inlineCode",{parentName:"p"},"x.Obj"),"\u5219\u8bf4\u660e",(0,o.kt)("inlineCode",{parentName:"p"},"Obj"),"\u5728\u6a21\u5757",(0,o.kt)("inlineCode",{parentName:"p"},"x"),"\u4e2d\u5b9a\u4e49\u3002"),(0,o.kt)("a",{id:"s2.2.3-cons"}),(0,o.kt)("a",{id:"223-cons"}),(0,o.kt)("a",{id:"imports-cons"}),"#### 2.2.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u5373\u4f7f\u662f\u6a21\u5757\u540d\u4e5f\u662f\u53ef\u80fd\u4f1a\u51b2\u7a81\u7684\u3002\n\u800c\u4e14\u4e00\u4e9b\u6a21\u5757\u540d\u53ef\u80fd\u5f88\u957f\u3002"),(0,o.kt)("a",{id:"s2.2.4-decision"}),(0,o.kt)("a",{id:"224-decision"}),(0,o.kt)("a",{id:"imports-decision"}),"#### 2.2.4 \u7ed3\u8bba",(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"import x"),"\u6765\u5f15\u7528\u5305\u6216\u8005\u6a21\u5757"),(0,o.kt)("li",{parentName:"ul"},"\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"from x import y"),"\uff0c\u5176\u4e2dx\u662f\u5305\u540d\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"\u662f\u6ca1\u6709\u524d\u7f00\u7684\u6a21\u5757\u540d"),(0,o.kt)("li",{parentName:"ul"},"\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"from x import y as z"),"\uff0c\u5982\u679c\u4e24\u4e2a\u6a21\u5757\u90fd\u88ab\u547d\u540d\u4e3a",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"\u4e14\u9700\u8981\u540c\u65f6\u5f15\u7528\uff1b\u6216\u8005",(0,o.kt)("inlineCode",{parentName:"li"},"y"),"\u662f\u4e00\u4e2a\u8d85\u957f\u7684\u540d\u5b57\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"import y as z"),"\uff0c\u4ec5\u5f53",(0,o.kt)("inlineCode",{parentName:"li"},"z"),"\u662f\u4e00\u4e2a\u6807\u51c6\u7f29\u5199\u65f6\u3002\uff08\u4f8b\u5982",(0,o.kt)("inlineCode",{parentName:"li"},"numpy"),"\u7684\u6807\u51c6\u7f29\u5199",(0,o.kt)("inlineCode",{parentName:"li"},"np"),"\uff09")),(0,o.kt)("p",null,"\u6bd4\u5982\u8bf4",(0,o.kt)("inlineCode",{parentName:"p"},"sound.effects.echo"),"\u53ef\u80fd\u6309\u7167\u4ee5\u4e0b\u7684\u65b9\u5f0f\u5f15\u7528"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from sound.effects import echo\n...\necho.EchoFilter(input, output, delay=0.7, atten=4)\n")),(0,o.kt)("p",null,"\u4e0d\u8981\u5229\u7528\u76f8\u5bf9\u540d\u79f0\u8fdb\u884c\u5f15\u7528\u3002\n\u5373\u4f7f\u8fd9\u4e2a\u6a21\u5757\u5728\u76f8\u540c\u7684\u5305\u91cc\u3002\n\u8bf7\u4f7f\u7528\u5b8c\u5168\u5305\u540d\u79f0\u3002\n\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u65e0\u610f\u4e2d\u4e24\u6b21\u5f15\u7528\u4e86\u76f8\u540c\u7684\u5305"),(0,o.kt)("a",{id:"s2.3-packages"}),(0,o.kt)("a",{id:"23-packages"}),(0,o.kt)("a",{id:"packages"}),"### 2.3 \u5305 Packages",(0,o.kt)("p",null,"\u5f15\u7528\u4efb\u4f55\u4e00\u4e2a\u6a21\u5757\u65f6\uff0c\u90fd\u4f7f\u7528\u8be5\u6a21\u5757\u5b8c\u5168\u8def\u5f84\u540d\u79f0\u3002"),(0,o.kt)("a",{id:"s2.3.1-pros"}),(0,o.kt)("a",{id:"231-pros"}),(0,o.kt)("a",{id:"packages-pros"}),"#### 2.3.1 \u4f18\u70b9",(0,o.kt)("p",null,"\u907f\u514d\u6a21\u5757\u540d\u7684\u51b2\u7a81\u6216\u8005\u7531\u4e8e\u975e\u9884\u671f\u7684\u6a21\u5757\u68c0\u7d22\u8def\u5f84\u9020\u6210\u7684\u51b2\u7a81\u3002\n\u4f7f\u5bfb\u627e\u6a21\u5757\u66f4\u52a0\u5bb9\u6613\u3002"),(0,o.kt)("a",{id:"s2.3.2-cons"}),(0,o.kt)("a",{id:"232-cons"}),(0,o.kt)("a",{id:"packages-cons"}),"#### 2.3.2 \u7f3a\u70b9",(0,o.kt)("p",null,"\u7528\u4e8e\u4f60\u4e0d\u5f97\u4e0d\u628a\u6309\u5c42\u6b21\u590d\u5236\u5305\uff0c\u90e8\u7f72\u4ee3\u7801\u4f1a\u53d8\u5f97\u590d\u6742\u3002\n\u4f46\u5bf9\u4e8e\u73b0\u4ee3\u7684\u90e8\u7f72\u673a\u5236\uff08CD\uff09\u8fd9\u4e0d\u662f\u95ee\u9898\u3002"),(0,o.kt)("a",{id:"s2.3.3-decision"}),(0,o.kt)("a",{id:"233-decision"}),(0,o.kt)("a",{id:"packages-decision"}),"#### 2.3.3 \u7ed3\u8bba",(0,o.kt)("p",null,"\u6240\u6709\u7684\u7684\u4ee3\u7801\u5728\u5f15\u7528\u6a21\u5757\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528\u5b8c\u6574\u7684\u5305\u540d\u3002"),(0,o.kt)("p",null,"\u5f15\u7528\u5e94\u8be5\u5982\u4e0b\uff1a"),(0,o.kt)("p",null,"\u6b63:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# \u5728\u4ee3\u7801\u4e2d\u5f15\u7528\u4f7f\u7528\u5b8c\u6574\u7684\u540d\u79f0\u5f15\u7528absl.flags (\u590d\u6742\u65b9\u5f0f).\nimport absl.flags\nfrom doctor.who import jodie\n\nFLAGS = absl.flags.FLAGS\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# \u4ec5\u4ec5\u4f7f\u7528\u6a21\u5757\u540d\u6765\u5f15\u5165flags (\u4e00\u822c\u65b9\u5f0f).\nfrom absl import flags\nfrom doctor.who import jodie\n\nFLAGS = flags.FLAGS\n")),(0,o.kt)("p",null,"\u8bef: ",(0,o.kt)("em",{parentName:"p"},"(\u5047\u8bbe\u8fd9\u4e2aPython\u4ee3\u7801\u6587\u4ef6\u5b58\u5728\u4e8e ",(0,o.kt)("inlineCode",{parentName:"em"},"doctor/who/")," \u4e14 ",(0,o.kt)("inlineCode",{parentName:"em"},"jodie.py")," \u4e5f\u5728\u5176\u4e0b )")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# \u4e0d\u6e05\u695a\u8be5\u5de5\u7a0b\u5e08\u60f3\u8981\u5f15\u7528\u4ec0\u4e48\u6a21\u5757\u3002\n# \u5728\u8be5\u7a0b\u5e8f\u4e2d\uff0c\u5b9e\u9645\u7684\u5f15\u7528\u7684\u6a21\u5757\u53d6\u51b3\u4e8esys.path.\u8fd9\u6837\u7684\u5916\u90e8\u56e0\u7d20\u3002\n# \u56e0\u6b64\u65e0\u6cd5\u731c\u6d4b\u8be5\u5de5\u7a0b\u5e08\u60f3\u8981\u5bfc\u5165\u7684\u662f\u54ea\u4e2ajodie\u6a21\u5757\nimport jodie\n")),(0,o.kt)("p",null,"\u5c3d\u7ba1\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5, \u6211\u4eec\u4e0d\u5e94\u5047\u5b9a\u4e3b\u4e8c\u8fdb\u5236\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u4f4d\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"sys.path"),"\u3002\n\u56e0\u6b64\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"import jodie"),"\u5e94\u5f53\u5f15\u7528\u81ea\u4e00\u4e2a\u7b2c\u4e09\u65b9\u5e93\uff0c\u6216\u8005\u4e00\u4e2a\u53eb\u505a",(0,o.kt)("inlineCode",{parentName:"p"},"jodie"),"\u7684\u9876\u5c42\u5305\uff0c\u800c\u4e0d\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"jodie.jp"),"\u3002"),(0,o.kt)("a",{id:"s2.4-exceptions"}),(0,o.kt)("a",{id:"24-exceptions"}),(0,o.kt)("a",{id:"exceptions"}),"### 2.4 \u5f02\u5e38 Exceptions",(0,o.kt)("p",null,"\u5f02\u5e38\u53ef\u4ee5\u7528\uff0c\u4f46\u8981\u5f88\u5c0f\u5fc3\u3002"),(0,o.kt)("a",{id:"s2.4.1-definition"}),(0,o.kt)("a",{id:"241-definition"}),(0,o.kt)("a",{id:"exceptions-definition"}),"#### 2.4.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u5f02\u5e38\u662f\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u9519\u8bef\u6216\u5176\u4ed6\u5f02\u5e38\u60c5\u51b5\u800c\u4e2d\u65ad\u7a0b\u5e8f\u6d41\u624b\u6bb5\u3002"),(0,o.kt)("a",{id:"s2.4.2-pros"}),(0,o.kt)("a",{id:"242-pros"}),(0,o.kt)("a",{id:"exceptions-pros"}),"#### 2.4.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u6b63\u5e38\u64cd\u4f5c\u4ee3\u7801\u7684\u63a7\u5236\u6d41\u7a0b\u4e0d\u4f1a\u88ab\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u5f04\u4e71\u3002\n\u5f53\u4e00\u4e2a\u786e\u5b9a\u7684\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u5f02\u5e38\u5904\u7406\u4e5f\u5141\u8bb8\u63a7\u5236\u6d41\u8df3\u8fc7\u4e00\u4e9b\u8bed\u53e5\uff0c\u4f8b\u5982\uff0c\u4ece\u4e00\u4e2aN\u9636\u5d4c\u5957\u51fd\u6570\u91cc\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u4e0d\u9700\u8981\u68c0\u67e5\u5168\u90e8\u9519\u8bef\u4ee3\u7801\u3002"),(0,o.kt)("a",{id:"s2.4.3-cons"}),(0,o.kt)("a",{id:"243-cons"}),(0,o.kt)("a",{id:"exceptions-cons"}),"#### 2.4.3 Cons",(0,o.kt)("p",null,"\u5f02\u5e38\u5904\u7406\u53ef\u80fd\u4f1a\u8ff7\u60d1\u63a7\u5236\u6d41\u3002\n\u5f53\u8c03\u7528\u4e00\u4e2a\u5e93\u7684\u65f6\u5019\uff0c\u5f02\u5e38\u60c5\u51b5\u5bb9\u6613\u88ab\u9057\u6f0f\u3002"),(0,o.kt)("a",{id:"s2.4.4-decision"}),(0,o.kt)("a",{id:"244-decision"}),(0,o.kt)("a",{id:"exceptions-decision"}),"#### 2.4.4 \u7ed3\u8bba",(0,o.kt)("p",null,"Exceptions must follow certain conditions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5728\u6709\u610f\u4e49\u65f6\u4f7f\u7528\u5185\u90e8\u5f02\u5e38\u7c7b\u3002\u6bd4\u5982\uff0c\u629b\u51fa\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"ValueError"),"\u6765\u8868\u793a\u4e00\u4e2a\u8fdd\u53cd\u7ea6\u5b9a\u6761\u4ef6\u7684\u9519\u8bef\n\uff08\u6bd4\u5982\u4f60\u672c\u6765\u60f3\u8981\u4e00\u4e2a\u6b63\u503c\uff0c\u7ed3\u679c\u4f20\u9012\u7ed9\u4f60\u4e00\u4e2a\u8d1f\u503c\uff09\u3002\u4e0d\u8981\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"assert"),"\u65ad\u8a00\u5728\u4e00\u4e2a\u516c\u5f00API\n\u4e0a\u6765\u9a8c\u8bc1\u53c2\u6570\u503c\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"assert"),"\u53ea\u80fd\u7528\u6765\u786e\u5b9a\u5185\u90e8\u7684\u6b63\u786e\u6027\uff0c\u800c\u4e0d\u80fd\u9650\u5236\u7a0b\u5e8f\u7684\u6b63\u786e\u4f7f\u7528\uff0c\u4e5f\u4e0d\u8868\n\u793a\u53d1\u751f\u4e86\u67d0\u4e9b\u610f\u5916\u4e8b\u4ef6\u3002\u5982\u679c\u8981\u8868\u793a\u67d0\u4e9b\u610f\u5916\u4e8b\u4ef6\uff0c\u8bf7\u4f7f\u7528raise\u8bed\u53e5\u3002\n\u4f8b\u5982\uff1a"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\u6b63:\n  def connect_to_next_port(self, minimum: int) -> int:\n    """\u94fe\u63a5\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u7aef\u53e3.\n\n    Args:\n      minimum: \u4e00\u4e2a\u5927\u7ea6\u6216\u7b49\u4e8e1024\u7684\u7aef\u53e3\u503c.\n\n    Returns:\n      \u65b0\u7684\u6700\u5c0f\u7aef\u53e3\u503c.\n\n    Raises:\n      ConnectionError: \u5982\u679c\u6ca1\u6709\u53d1\u73b0\u53ef\u7528\u7684\u7aef\u53e3.\n    """\n    if minimum < 1024:\n      # \u6ce8\u610f\uff0c\u8fd9\u4e2a\u5f02\u5e38\u7684\u629b\u51fa\u5e76\u6ca1\u6709\u7528"Raises:"\u8282\u5199\u5728\u63cf\u8ff0\u6587\u6863\u91cc\uff0c\u56e0\u4e3a\u4fdd\u969c\u8fd9\u79cd\u5bf9API\u8bef\u7528\u7684\u7279\u5b9a\u884c\u4e3a\u662f\u4e0d\u5fc5\u8981\u7684\u3002\n      raise ValueError(f\'Min. port must be at least 1024, not {minimum}.\')\n    port = self._find_next_open_port(minimum)\n    if not port:\n      raise ConnectionError(\n          f\'\u4e0d\u80fd\u901a\u8fc7\u7aef\u53e3 {minimum} \u6216\u66f4\u9ad8\u7aef\u53e3\u94fe\u63a5\u5230\u670d\u52a1\u5668.\')\n    assert port >= minimum, (\n        f\' \u5f53 {minimum} \u4e3a\u6700\u5c0f\u7aef\u53e3\u65f6\u5019\uff0c{port} \u662f\u4e00\u4e2a\u975e\u671f\u671b\u7684\u7aef\u53e3.\')\n    return port\n')),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\u8bef:\n  def connect_to_next_port(self, minimum: int) -> int:\n    """\u94fe\u63a5\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u7aef\u53e3\n\n    Args:\n      minimum: \u4e00\u4e2a\u5927\u7ea6\u6216\u7b49\u4e8e1024\u7684\u7aef\u53e3\u503c.\n\n    Returns:\n      \u65b0\u7684\u6700\u5c0f\u7aef\u53e3\u503c.\n    """\n    assert minimum >= 1024, \'\u6700\u5c0f\u7aef\u53e3\u81f3\u5c11\u662f 1024.\'\n    port = self._find_next_open_port(minimum)\n    assert port is not None\n    return port\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5e93\u6216\u8005\u5305\u4f1a\u6709\u4ed6\u4eec\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\u3002\u8fd9\u4e9b\u5f02\u5e38\u5fc5\u987b\u7ee7\u627f\u81ea\u4e00\u4e2a\u5df2\u6709\u7684\u5f02\u5e38\u7c7b\u3002\n\u5f02\u5e38\u7684\u540d\u5b57\u5fc5\u987b\u4ee5",(0,o.kt)("inlineCode",{parentName:"p"},"Error"),"\u7ed3\u5c3e\uff0c\u5e76\u4e14\u4e0d\u80fd\u62d7\u53e3(",(0,o.kt)("inlineCode",{parentName:"p"},"foo.FooError"),")\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u5168\u90e8\u6355\u6349",(0,o.kt)("inlineCode",{parentName:"p"},"except:"),"\u8bed\u53e5\uff0c\u6216\u8005\u6355\u6349",(0,o.kt)("inlineCode",{parentName:"p"},"Exception"),"\u6216\u8005",(0,o.kt)("inlineCode",{parentName:"p"},"StandardError"),"\uff0c\u9664\u975e\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u60f3\u8981\u518d\u6b21\u629b\u51fa\u8fd9\u4e2a\u5f02\u5e38\uff0c\u6216\u8005"),(0,o.kt)("li",{parentName:"ul"},"\u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f\u5206\u79bb\u70b9\uff0c\u5728\u8fd9\u4e2a\u5206\u79bb\u70b9\u5f02\u5e38\u4e0d\u518d\u88ab\u629b\u51fa\uff0c\u4f46\u4f1a\u88ab\u8bb0\u5f55\u548c\u6291\u5236\uff0c\u4f8b\u5982\n\u4ece\u4e00\u4e2a\u4e3a\u4e86\u4fdd\u62a4\u5176\u6700\u5916\u5c42\u5757\u800c\u5d29\u6e83\u7684\u7ebf\u7a0b")),(0,o.kt)("p",{parentName:"li"},"Python\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"except:"),"\u4e0a\u662f\u975e\u5e38\u5bbd\u5bb9\u7684\uff0c\u5b83\u53ef\u4ee5\u6355\u6349\u4efb\u4f55\u5f02\u5e38\u5305\u62ec\u62fc\u5199\u9519\u8bef\u3001sys.exit()\u3001\nCtrl+C\u4e2d\u65ad\u3001\u5355\u5143\u6d4b\u8bd5\u9519\u8bef\uff0c\u4ee5\u53ca\u6240\u6709\u4f60\u4e0d\u60f3\u88ab\u6355\u6349\u7684\u5f02\u5e38\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6700\u5c0f\u5316",(0,o.kt)("inlineCode",{parentName:"p"},"try"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"except"),"\u5757\u4e4b\u95f4\u7684\u4ee3\u7801\u6570\u91cf\u3002\u4ee3\u7801\u6570\u91cf\u8d8a\u5927\uff0c\u5f15\u53d1\u975e\u671f\u5f85\u7684\u5f02\u5e38\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5927\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"try"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"except"),"\u5757\u4f1a\u9690\u85cf\u6389\u771f\u6b63\u7684\u5f02\u5e38\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"finally"),"\u6536\u5c3e\u3002\u65e0\u8bba\u5f02\u5e38\u662f\u5426\u88ab\u629b\u51fa\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"finally"),"\u5e38\u5e38\u7528\u4e8e\u6e05\u7406\uff0c\u4f8b\u5982\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u3002"))),(0,o.kt)("a",{id:"s2.5-global-variables"}),(0,o.kt)("a",{id:"25-global-variables"}),(0,o.kt)("a",{id:"global-variables"}),"### 2.5 Global variables",(0,o.kt)("p",null,"\u907f\u514d\u5168\u5c40\u53d8\u91cf\uff01"),(0,o.kt)("a",{id:"s2.5.1-definition"}),(0,o.kt)("a",{id:"251-definition"}),(0,o.kt)("a",{id:"global-variables-definition"}),"#### 2.5.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u53d8\u91cf\u5e94\u8be5\u58f0\u660e\u5728\u6a21\u5757\u91cc\uff0c\u6216\u8005\u4f5c\u4e3a\u7c7b\u6210\u5458\u88ab\u58f0\u660e\u3002"),(0,o.kt)("a",{id:"s2.5.2-pros"}),(0,o.kt)("a",{id:"252-pros"}),(0,o.kt)("a",{id:"global-variables-pros"}),"#### 2.5.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u5076\u5c14\u6709\u7528\u3002"),(0,o.kt)("a",{id:"s2.5.3-cons"}),(0,o.kt)("a",{id:"253-cons"}),(0,o.kt)("a",{id:"global-variables-cons"}),"#### 2.5.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u7531\u4e8e\u5bf9\u5168\u5c40\u53d8\u91cf\u7684\u8d4b\u503c\u5728\u6a21\u5757\u7b2c\u4e00\u6b21\u88ab\u5f15\u7528\u65f6\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u56e0\u6b64\u518d\u6b21\u5f15\u7528\u8be5\u6a21\u5757\u65f6\u6709\u53ef\u80fd\u6539\u53d8\u6a21\u5757\u7684\u884c\u4e3a\u3002\nHas the potential to change module behavior during the import, because\nassignments to global variables are done when the module is first imported."),(0,o.kt)("a",{id:"s2.5.4-decision"}),(0,o.kt)("a",{id:"254-decision"}),(0,o.kt)("a",{id:"global-variables-decision"}),"#### 2.5.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u907f\u514d\u5168\u5c40\u53d8\u91cf\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u6280\u672f\u6027\u7684\u53d8\u91cf(technically variables)\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528\u6a21\u5757\u5c42\u7684\u5e38\u91cf\u3002\n\u4f8b\u5982\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"_MAX_HOLY_HANDGRENADE_COUNT = 3"),"\u3002\n\u5e38\u91cf\u7684\u5b9a\u4e49\u5e94\u8be5\u5168\u90e8\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u3002\n\u8bf7\u53c2\u8003",(0,o.kt)("a",{parentName:"p",href:"#s3.16-naming"},"\u547d\u540d\u89c4\u5219"),"\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u975e\u5f97\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u5e94\u8be5\u5728\u6a21\u5757\u7ea7\u522b\u58f0\u660e\u5168\u5c40\u53d8\u91cf\uff0c\u5e76\u901a\u8fc7\u5728\u540d\u79f0\u524d\u6dfb\u52a0 ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," \u4f7f\u5176\u6210\u4e3a\u6a21\u5757\u5185\u90e8\u53d8\u91cf\u3002\n\u5916\u90e8\u8bbf\u95ee\u5fc5\u987b\u901a\u8fc7\u516c\u5171\u6a21\u5757\u7ea7\u51fd\u6570\u5b8c\u6210\u3002\n\u8bf7\u53c2\u8003",(0,o.kt)("a",{parentName:"p",href:"#s3.16-naming"},"\u547d\u540d\u89c4\u5219"),"\u3002"),(0,o.kt)("a",{id:"s2.6-nested"}),(0,o.kt)("a",{id:"26-nested"}),(0,o.kt)("a",{id:"nested-classes-functions"}),"### 2.6 \u5d4c\u5957/\u672c\u5730/\u5185\u90e8\u7c7b\u548c\u51fd\u6570",(0,o.kt)("p",null,"\u53ef\u4ee5\u7528\u5d4c\u5957\u5c40\u90e8\u51fd\u6570\u6216\u7c7b\u5173\u95ed\u5c40\u90e8\u53d8\u91cf\u3002\n\u5185\u90e8\u7c7b\u4e5f\u53ef\u4ee5\u3002"),(0,o.kt)("a",{id:"s2.6.1-definition"}),(0,o.kt)("a",{id:"261-definition"}),(0,o.kt)("a",{id:"nested-classes-functions-definition"}),"#### 2.6.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u88ab\u5b9a\u4e49\u5728\u65b9\u6cd5\uff0c\u51fd\u6570\uff0c\u6216\u8005\u53e6\u4e00\u4e2a\u7c7b\u91cc\u9762\u3002\n\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u5b9a\u4e49\u5728\u4e00\u4e2a\u65b9\u6cd5\u6216\u51fd\u6570\u91cc\u3002\n\u5d4c\u5957\u51fd\u6570\u5bf9\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5177\u6709\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002"),(0,o.kt)("a",{id:"s2.6.2-pros"}),(0,o.kt)("a",{id:"262-pros"}),(0,o.kt)("a",{id:"nested-classes-functions-pros"}),"#### 2.6.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u5141\u8bb8\u5b9a\u4e49\u4ec5\u5728\u975e\u5e38\u6709\u9650\u7684\u8303\u56f4\u5185\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u548c\u51fd\u6570\u3002\n\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u88c5\u9970\u5668\u3002\n\u975e\u5e38 ",(0,o.kt)("a",{parentName:"p",href:"http://www.google.com/url?sa=D&q=http://en.wikipedia.org/wiki/Abstract_data_type"},"ADT"),"-y."),(0,o.kt)("a",{id:"s2.6.3-cons"}),(0,o.kt)("a",{id:"263-cons"}),(0,o.kt)("a",{id:"nested-classes-functions-cons"}),"#### 2.6.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u5d4c\u5957\u51fd\u6570\u4e0d\u53ef\u4ee5\u88ab\u76f4\u63a5\u6d4b\u8bd5\u3002\n\u5d4c\u5957\u51fd\u6570\u53ef\u80fd\u4f1a\u8ba9\u5176\u5916\u90e8\u51fd\u6570\u66f4\u957f\u66f4\u96be\u8bfb\u3002"),(0,o.kt)("a",{id:"s2.6.4-decision"}),(0,o.kt)("a",{id:"264-decision"}),(0,o.kt)("a",{id:"nested-classes-functions-decision"}),"#### 2.6.4 Decision",(0,o.kt)("p",null,"\u53ef\u4ee5\u5728\u9075\u5b88\u6ce8\u610f\u4e8b\u9879\u7684\u524d\u63d0\u4e0b\u4f7f\u7528\u5d4c\u5957\u3002\n\u9664\u975e\u5173\u95ed\u4e86\u9664 ",(0,o.kt)("inlineCode",{parentName:"p"},"self")," \u6216 ",(0,o.kt)("inlineCode",{parentName:"p"},"cls")," \u4e4b\u5916\u7684\u672c\u5730\u503c\uff0c\u5426\u5219\u5e94\u8be5\u907f\u514d\u5d4c\u5957\u51fd\u6570\u6216\u7c7b\u3002\n\u4e0d\u8981\u56e0\u4e3a\u5411\u7528\u6237\u9690\u5c42\u67d0\u4e9b\u6a21\u5757\u800c\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u3002\n\u5982\u679c\u4f60\u60f3\u9690\u85cf\u4e00\u4e9b\u51fd\u6570\uff0c\u8bf7\u5728\u6a21\u5757\u7ea7\u522b\u4f7f\u7528\u524d\u7f00","_","\uff0c\u8fd9\u6837\u5b83\u53ef\u4ee5\u88ab\u6d4b\u8bd5\u5230\u3002"),(0,o.kt)("a",{id:"s2.7-comprehensions"}),(0,o.kt)("a",{id:"s2.7-list_comprehensions"}),(0,o.kt)("a",{id:"27-list_comprehensions"}),(0,o.kt)("a",{id:"list_comprehensions"}),(0,o.kt)("a",{id:"list-comprehensions"}),(0,o.kt)("a",{id:"comprehensions"}),"### 2.7 \u89e3\u91ca\u548c\u751f\u6210\u8868\u8fbe\u5f0f \uff08Comprehensions & Generator Expressions\uff09",(0,o.kt)("p",null,"\u5728\u4e00\u4e9b\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f7f\u7528"),(0,o.kt)("a",{id:"s2.7.1-definition"}),(0,o.kt)("a",{id:"271-definition"}),(0,o.kt)("a",{id:"comprehensions-definition"}),"#### 2.7.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u5217\u8868\uff0c\u5b57\u5178\uff0c\u548c\u96c6\u5408\u89e3\u91ca\uff0c\u4f8b\u5982\u751f\u6210\u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u6d01\u548c\u6709\u6548\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u5bb9\u5668\u7c7b\u578b\u548c\u8fed\u4ee3\u5668\uff0c\n\u800c\u4e0d\u662f\u8bc9\u8bf8\u4e8e\u4f20\u7edf\u7684\u5faa\u73af\u3002"),(0,o.kt)("a",{id:"s2.7.2-pros"}),(0,o.kt)("a",{id:"272-pros"}),(0,o.kt)("a",{id:"comprehensions-pros"}),"#### 2.7.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u7b80\u5355\u7684\u5217\u8868\u89e3\u91ca\u6bd4\u5176\u4ed6\u7684\u521b\u5efa\u5b57\u5178\u3001\u5217\u8868\u3001\u6216\u96c6\u5408\u7684\u65b9\u6cd5\u66f4\u52a0\u6e05\u695a\u548c\u7b80\u5355\u3002\n\u8868\u8fbe\u5f0f\u751f\u6210\u5668\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u521b\u5efa\u4e00\u4e2a\u5b8c\u5168\u7684\u5217\u8868\u3002"),(0,o.kt)("a",{id:"s2.7.3-cons"}),(0,o.kt)("a",{id:"273-cons"}),(0,o.kt)("a",{id:"comprehensions-cons"}),"#### 2.7.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u590d\u6742\u7684\u751f\u6210\u8868\u8fbe\u5f0f\u5f88\u96be\u8bfb\u61c2\u3002"),(0,o.kt)("a",{id:"s2.7.4-decision"}),(0,o.kt)("a",{id:"274-decision"}),(0,o.kt)("a",{id:"comprehensions-decision"}),"#### 2.7.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u8868\u8fbe\u5f0f\u3002\n\u5176\u6240\u6709\u7684\u90e8\u5206\u5fc5\u987b\u5199\u5728\u4e00\u884c\u5185\uff0c\u5305\u62ec\uff1a\u6620\u5c04\u8868\u8fbe\u5f0f\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"\u5faa\u73af\u6587\uff0c\u8fc7\u6ee4\u8868\u8fbe\u5f0f\u3002\n\u6700\u597d\u4e0d\u8981\u6709\u591a\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"\u6587\u3002\n\u5982\u679c\u6709\u591a\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"\u6587\u6700\u597d\u4f7f\u7528\u5faa\u73af\u6765\u907f\u514d\u4ee3\u7801\u8fc7\u4e8e\u590d\u6742\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u6b63:\n  result = [mapping_expr for value in iterable if filter_expr]\n\n  result = [{'key': value} for value in iterable\n            if a_long_filter_expression(value)]\n\n  result = [complicated_transform(x)\n            for x in iterable if predicate(x)]\n\n  descriptive_name = [\n      transform({'key': key, 'value': value}, color='black')\n      for key, value in generate_iterable(some_input)\n      if complicated_condition_is_met(key, value)\n  ]\n\n  result = []\n  for x in range(10):\n      for y in range(5):\n          if x * y > 10:\n              result.append((x, y))\n\n  return {x: complicated_transform(x)\n          for x in long_generator_function(parameter)\n          if x is not None}\n\n  squares_generator = (x**2 for x in range(10))\n\n  unique_names = {user.name for user in users if user is not None}\n\n  eat(jelly_bean for jelly_bean in jelly_beans\n      if jelly_bean.color == 'black')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u8bef:\n  result = [complicated_transform(\n                x, some_argument=x+1)\n            for x in iterable if predicate(x)]\n\n  result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]\n\n  return ((x, y, z)\n          for x in range(5)\n          for y in range(5)\n          if x != y\n          for z in range(5)\n          if y != z)\n")),(0,o.kt)("a",{id:"s2.8-default-iterators-and-operators"}),(0,o.kt)("a",{id:"default-iterators-operators"}),"### 2.8 \u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u8fd0\u7b97\u7b26",(0,o.kt)("p",null,"\u8bf7\u4f7f\u7528\u7c7b\u578b\u652f\u6301\u7684\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982\u5217\u8868\uff0c\u5b57\u5178\u548c\u6587\u4ef6\u3002"),(0,o.kt)("a",{id:"s2.8.1-definition"}),(0,o.kt)("a",{id:"281-definition"}),(0,o.kt)("a",{id:"default-iterators-operators-definition"}),"#### 2.8.1 \u5b9a\u4e49",(0,o.kt)("p",null,'\u96c6\u5408\u7c7b\u578b\uff0c\u4f8b\u5982\u5b57\u5178\u548c\u5217\u8868\uff0c\u90fd\u6709\u5b9a\u4e49\u5176\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u6210\u5458\u6d4b\u8bd5\u8fd0\u7b97\u7b26\uff08"in" \u548c "not in"\uff09\u3002'),(0,o.kt)("a",{id:"s2.8.2-pros"}),(0,o.kt)("a",{id:"282-pros"}),(0,o.kt)("a",{id:"default-iterators-operators-pros"}),"#### 2.8.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u8fd0\u7b97\u4f7f\u7528\u7b80\u5355\u4e14\u6548\u7387\u9ad8\u3002\n\u4ed6\u4eec\u53ef\u4ee5\u76f4\u63a5\u64cd\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u8c03\u7528\u989d\u5916\u7684\u65b9\u6cd5\u3002\n\u4f7f\u7528\u9ed8\u8ba4\u8fd0\u7b97\u7b26\u7684\u65b9\u6cd5\u662f\u53ef\u4ee5\u518d\u5229\u7528\u7684\u3002\n\u5b83\u53ef\u4ee5\u4e0e\u652f\u6301\u8be5\u64cd\u4f5c\u7684\u4efb\u4f55\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\u3002"),(0,o.kt)("a",{id:"s2.8.3-cons"}),(0,o.kt)("a",{id:"283-cons"}),(0,o.kt)("a",{id:"default-iterators-operators-cons"}),"#### 2.8.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u60a8\u65e0\u6cd5\u901a\u8fc7\u8bfb\u53d6\u65b9\u6cd5\u540d\u79f0\u6765\u5224\u65ad\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u4f8b\u5982",(0,o.kt)("inlineCode",{parentName:"p"},"has_key()"),"\u6307\u7684\u662f\u4e00\u4e2a\u5b57\u5178\u3002\n\u4f46\u5b83\u6ca1\u51c6\u4e5f\u662f\u4e00\u4e2a\u4f18\u70b9\u3002"),(0,o.kt)("a",{id:"s2.8.4-decision"}),(0,o.kt)("a",{id:"284-decision"}),(0,o.kt)("a",{id:"default-iterators-operators-decision"}),"#### 2.8.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u8bf7\u4f7f\u7528\u7c7b\u578b\u652f\u6301\u7684\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982\u5217\u8868\uff0c\u5b57\u5178\u548c\u6587\u4ef6\u3002\n\u5185\u7f6e\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e86\u8fed\u4ee3\u65b9\u6cd5\u3002\n\u4e0e\u8fd4\u56de\u5217\u8868\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u66f4\u53d7\u6b22\u8fce\uff0c\u9664\u975e\u4f60\u4e0d\u60f3\u5728\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\u5bf9\u5176\u6210\u5458\u8fdb\u884c\u53d8\u6362\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:  for key in adict: ...\n      if key not in adict: ...\n      if obj in alist: ...\n      for line in afile: ...\n      for k, v in adict.items(): ...\n      for k, v in six.iteritems(adict): ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:   for key in adict.keys(): ...\n      if not adict.has_key(key): ...\n      for line in afile.readlines(): ...\n      for k, v in dict.iteritems(): ...\n")),(0,o.kt)("a",{id:"s2.9-generators"}),(0,o.kt)("a",{id:"29-generators"}),(0,o.kt)("a",{id:"generators"}),"### 2.9 \u751f\u6210\u5668 yield",(0,o.kt)("p",null,"\u5982\u679c\u9700\u8981\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668"),(0,o.kt)("a",{id:"s2.9.1-definition"}),(0,o.kt)("a",{id:"291-definition"}),(0,o.kt)("a",{id:"generators-definition"}),"#### 2.9 \u5b9a\u4e49",(0,o.kt)("p",null,"\u751f\u6210\u5668\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u5c06\u751f\u6210\u4e00\u4e2a\u503c\u5f53\u5b83\u6bcf\u6b21\u8fd0\u884c\u5230yield\u6587\u7684\u65f6\u5019\u3002\n\u5728\u5b83\u751f\u6210\u4e86\u4e00\u4e2a\u503c\u4ee5\u540e\uff0c\u751f\u6210\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u72b6\u6001\u4f1a\u88ab\u6302\u8d77\u76f4\u5230\u9700\u8981\u4e0b\u4e00\u4e2a\u503c\u5f97\u65f6\u5019\u3002"),(0,o.kt)("a",{id:"s2.9.2-pros"}),(0,o.kt)("a",{id:"292-pros"}),(0,o.kt)("a",{id:"generators-pros"}),"#### 2.9.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u4ee3\u7801\u66f4\u52a0\u7b80\u5355\uff0c\u56e0\u4e3a\u5c40\u90e8\u53d8\u91cf\u548c\u63a7\u5236\u6d41\u7684\u72b6\u6001\u4f1a\u4e3a\u6bcf\u4e00\u6b21\u8fd0\u884c\u800c\u4fdd\u7559\u3002\n\u6bd4\u8d77\u4e00\u4e2a\u4f1a\u521b\u5efa\u6574\u4e2a\u5217\u8868\u7684\u51fd\u6570\uff0c\u751f\u6210\u5668\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002"),(0,o.kt)("a",{id:"s2.9.3-cons"}),(0,o.kt)("a",{id:"293-cons"}),(0,o.kt)("a",{id:"generators-cons"}),"#### 2.9.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u6ca1\u6709\u3002"),(0,o.kt)("a",{id:"s2.9.4-decision"}),(0,o.kt)("a",{id:"294-decision"}),(0,o.kt)("a",{id:"generators-decision"}),"#### 2.9.4 \u7ed3\u8bba",(0,o.kt)("p",null,'\u5728\u4f60\u7684\u6ce8\u91ca\u6587\u6863\u91cc\uff0c\u4f7f\u7528 "Yields:" \u6bd4\u4f7f\u7528 "Returns:" \u597d\u3002'),(0,o.kt)("a",{id:"s2.10-lambda-functions"}),(0,o.kt)("a",{id:"210-lambda-functions"}),(0,o.kt)("a",{id:"lambdas"}),"### 2.10 Lambda\u8868\u8fbe\u5f0f",(0,o.kt)("p",null,"\u4e00\u884c\u7ed3\u675f\u3002\n\u5728\u505a\u751f\u6210\u8868\u8fbe\u5f0f\u91cc\uff0c\u66f4\u559c\u6b22",(0,o.kt)("inlineCode",{parentName:"p"},"lambda"),"\u800c\u4e0d\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"map()"),"\u6216",(0,o.kt)("inlineCode",{parentName:"p"},"filter()"),"\u3002"),(0,o.kt)("a",{id:"s2.10.1-definition"}),(0,o.kt)("a",{id:"2101-definition"}),(0,o.kt)("a",{id:"lambdas-definition"}),"#### 2.10.1 \u5b9a\u4e49",(0,o.kt)("p",null,"Lambda\u8868\u8fbe\u5f0f\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u4e0d\u9700\u8981\u58f0\u660e\u51fd\u6570\u3002"),(0,o.kt)("a",{id:"s2.10.2-pros"}),(0,o.kt)("a",{id:"2102-pros"}),(0,o.kt)("a",{id:"lambdas-pros"}),"#### 2.10.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u65b9\u4fbf\u3002"),(0,o.kt)("a",{id:"s2.10.3-cons"}),(0,o.kt)("a",{id:"2103-cons"}),(0,o.kt)("a",{id:"lambdas-cons"}),"#### 2.10.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u6bd4\u8d77\u672c\u5730\u51fd\u6570\uff0cLambda\u8868\u8fbe\u5f0f\u6bd4\u8f83\u96be\u8bfb\uff0c\u96be\u6392\u9519\u3002\n\u533f\u540d\u5316\u610f\u5473\u7740\u5f02\u5e38\u6808\u66f4\u96be\u61c2\u3002\n\u8868\u8fbe\u80fd\u529b\u6bd4\u8f83\u6709\u9650\uff0c\u56e0\u4e3a\u5b83\u53ea\u5141\u8bb8\u5305\u542b\u4e00\u4e2a\u8bed\u53e5\u3002"),(0,o.kt)("a",{id:"s2.10.4-decision"}),(0,o.kt)("a",{id:"2104-decision"}),(0,o.kt)("a",{id:"lambdas-decision"}),"#### 2.10.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u5982\u679c\u4f60\u53ea\u60f3\u5199\u4e00\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u7528Lambda\u8868\u8fbe\u5f0f\u3002\n\u4f46\u662f\u5982\u679c\u4f60\u7684\u8bed\u53e5\u8d85\u8fc760-80\u4e2a\u5b57\u7b26\uff0c\u5efa\u8bae\u4f60\u5b9a\u4e49\u4e00\u4e2a\u4f20\u7edf\u7684",(0,o.kt)("a",{parentName:"p",href:"#lexical-scoping"},"\u5185\u5d4c\u51fd\u6570"),"."),(0,o.kt)("p",null,"\u5bf9\u4e8e\u4e58\u6cd5\u4e00\u7c7b\u7684\u4e00\u822c\u64cd\u4f5c\u7b26\uff0c\u8bf7\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"operator"),"\u6a21\u5757\u91cc\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662fLambda\u8868\u8fbe\u5f0f\u3002\n\u6bd4\u5982\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"operator.mul"),"\u8981\u6bd4",(0,o.kt)("inlineCode",{parentName:"p"},"lambda x, y: x * y"),"\u66f4\u597d\u3002"),(0,o.kt)("a",{id:"s2.11-conditional-expressions"}),(0,o.kt)("a",{id:"211-conditional-expressions"}),(0,o.kt)("a",{id:"conditional-expressions"}),"### 2.11 \u6761\u4ef6\u8868\u8fbe\u5f0f",(0,o.kt)("p",null,"\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f7f\u7528\u3002"),(0,o.kt)("a",{id:"s2.11.1-definition"}),(0,o.kt)("a",{id:"2111-definition"}),(0,o.kt)("a",{id:"conditional-expressions-definition"}),"#### 2.11.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u6761\u4ef6\u8868\u8fbe\u5f0f\uff08\u53c8\u79f0\u201c\u4e09\u5143\u8fd0\u7b97\u7b26\u201d\uff09\u4e3aIF\u8bed\u53e5\u63d0\u4f9b\u4e00\u79cd\u66f4\u7b80\u77ed\u7684\u8868\u8fbe\u3002\n\u4f8b\u5982\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"x = 1 if cond else 2"),"\u3002"),(0,o.kt)("a",{id:"s2.11.2-pros"}),(0,o.kt)("a",{id:"2112-pros"}),(0,o.kt)("a",{id:"conditional-expressions-pros"}),"#### 2.11.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u66f4\u77ed\uff0c\u66f4\u65b9\u4fbf\u3002"),(0,o.kt)("a",{id:"s2.11.3-cons"}),(0,o.kt)("a",{id:"2113-cons"}),(0,o.kt)("a",{id:"conditional-expressions-cons"}),"#### 2.11.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u5f53\u591a\u4f59\u4e00\u4e2aIF\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u66f4\u96be\u8bfb\u3002\n\u5982\u679c\u8868\u8fbe\u5f0f\u592a\u957f\uff0c\u6761\u4ef6\u8bed\u53e5\u53ef\u80fd\u6bd4\u8f83\u96be\u4ee5\u5b9a\u4f4d\u3002"),(0,o.kt)("a",{id:"s2.11.4-decision"}),(0,o.kt)("a",{id:"2114-decision"}),(0,o.kt)("a",{id:"conditional-expressions-decision"}),"#### 2.11.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u7b80\u5355\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4f7f\u7528\u3002\n\u6bcf\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5fc5\u987b\u5360\u4e00\u884c\uff1atrue-\u8868\u8fbe\u5f0f, if-\u8868\u8fbe\u5f0f, else-\u8868\u8fbe\u5f0f\u3002\n\u5982\u679c\u8fc7\u4e8e\u590d\u6742\u53ef\u4ee5\u4f7f\u7528\u5b8c\u6574\u7684IF\u8bed\u53e5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u6b63:\n    one_line = 'yes' if predicate(value) else 'no'\n    slightly_split = ('yes' if predicate(value)\n                      else 'no, nein, nyet')\n    the_longest_ternary_style_that_can_be_done = (\n        'yes, true, affirmative, confirmed, correct'\n        if predicate(value)\n        else 'no, false, negative, nay')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u8bef:\n    bad_line_breaking = ('yes' if predicate(value) else\n                         'no')\n    portion_too_long = ('yes'\n                        if some_long_module.some_long_predicate_function(\n                            really_long_variable_name)\n                        else 'no, false, negative, nay')\n")),(0,o.kt)("a",{id:"s2.12-default-argument-values"}),(0,o.kt)("a",{id:"212-default-argument-values"}),(0,o.kt)("a",{id:"default-arguments"}),"### 2.12 \u53c2\u6570\u9ed8\u8ba4\u503c",(0,o.kt)("p",null,"\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002"),(0,o.kt)("a",{id:"s2.12.1-definition"}),(0,o.kt)("a",{id:"2121-definition"}),(0,o.kt)("a",{id:"default-arguments-definition"}),"#### 2.12.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u53c2\u6570\u7684\u540e\u90e8\u6307\u5b9a\u53d8\u91cf\u7684\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982",(0,o.kt)("inlineCode",{parentName:"p"},"def foo(a, b=0):"),"\u3002\n\u5982\u679c\u5728\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"foo"),"\u65f6\u53ea\u8f93\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u5219",(0,o.kt)("inlineCode",{parentName:"p"},"b"),"\u5c06\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a0.\n\u5982\u679c\u8f93\u5165\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u5219",(0,o.kt)("inlineCode",{parentName:"p"},"b"),"\u88ab\u8d4b\u4e88\u7b2c\u4e8c\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u503c\u3002"),(0,o.kt)("a",{id:"s2.12.2-pros"}),(0,o.kt)("a",{id:"2122-pros"}),(0,o.kt)("a",{id:"default-arguments-pros"}),"#### 2.12.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u4f60\u5199\u7684\u51fd\u6570\u5e38\u5e38\u5305\u542b\u5f88\u591a\u7684\u9ed8\u8ba4\u503c\uff0c\u4f46\u4f60\u5e38\u5e38\u4e0d\u9700\u8981\u53bb\u91cd\u5199\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u3002\n\u53c2\u6570\u9ed8\u8ba4\u503c\u63d0\u4f9b\u4e86\u5b9e\u73b0\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u79cd\u9014\u5f84\uff0c\u4f60\u4e0d\u9700\u8981\u4e3a\u4e86\u8fd9\u4e9b\u4e0d\u5e38\u89c1\u7684\u60c5\u51b5\u53bb\u5b9a\u4e49\u5f88\u591a\u7684\u51fd\u6570\u3002\n\u800c\u4e14Python\u4e0d\u652f\u6301\u65b9\u6cd5\u91cd\u8f7d\uff0c\u53c2\u6570\u9ed8\u8ba4\u503c\u662f\u4ee3\u66ff\u65b9\u6cd5\u91cd\u8f7d\u7684\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u3002"),(0,o.kt)("a",{id:"s2.12.3-cons"}),(0,o.kt)("a",{id:"2123-cons"}),(0,o.kt)("a",{id:"default-arguments-cons"}),"#### 2.12.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u53c2\u6570\u9ed8\u8ba4\u503c\u4f1a\u5728\u6a21\u5757\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u88ab\u5224\u5b9a\u4e00\u6b21\u3002\n\u5982\u679c\u53c2\u6570\u662f\u53ef\u53d8\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u6216\u5b57\u5178\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u95ee\u9898\u3002\n\u5982\u679c\u51fd\u6570\u6539\u53d8\u4e86\u8fd9\u4e9b\u5bf9\u8c61\uff08\u4f8b\u5982\u589e\u52a0\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff09\uff0c\u9ed8\u8ba4\u503c\u4e5f\u4f1a\u88ab\u6539\u53d8\u3002"),(0,o.kt)("a",{id:"s2.12.4-decision"}),(0,o.kt)("a",{id:"2124-decision"}),(0,o.kt)("a",{id:"default-arguments-decision"}),"#### 2.12.4 Decision",(0,o.kt)("p",null,"\u5728\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\u7684\u524d\u63d0\u4e0b\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u9ed8\u8ba4\u503c\uff1a"),(0,o.kt)("p",null,"\u4e0d\u8981\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u4f7f\u7528\u53ef\u53d8\u5bf9\u8c61\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u6b63: def foo(a, b=None):\n         if b is None:\n             b = []\n\u6b63: def foo(a, b: Optional[Sequence] = None):\n         if b is None:\n             b = []\n\u6b63: def foo(a, b: Sequence = ()):  # \u7a7a\u5143\u7ec4\u662f\u53ef\u4ee5\u7684\u56e0\u4e3a\u7a7a\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\n         ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u8bef:  def foo(a, b=[]):\n         ...\n\u8bef:  def foo(a, b=time.time()):  # \u65e0\u6cd5\u786e\u5b9a\u6b64\u65f6\u6a21\u5757\u5df2\u7ecf\u88ab\u8c03\u7528\n         ...\n\u8bef:  def foo(a, b=FLAGS.my_thing):  # sys.argv \u5c1a\u672a\u5904\u7406...\n         ...\n\u8bef:  def foo(a, b: Mapping = {}):  # \u53ef\u80fd\u4f1a\u88ab\u4f20\u9012\u672a\u7ecf\u9a8c\u8bc1\u7684\u4ee3\u7801\n         ...\n")),(0,o.kt)("a",{id:"s2.13-properties"}),(0,o.kt)("a",{id:"213-properties"}),(0,o.kt)("a",{id:"properties"}),"### 2.13 \u5c5e\u6027 Properties \uff08getter, setter\u7b49\u65b9\u6cd5\uff09",(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nblog09.com/w/2019/01/09/python-setter-getter/"},"\u53c2\u8003")),(0,o.kt)("p",null,"\u5f53\u4f60\u9700\u8981\u7b80\u5355\u3001\u8f7b\u91cf\u7684getter, setter\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u5c5e\u6027\u53bb\u8bfb\u53d6\u6216\u8bbe\u5b9a\u6570\u636e\u3002"),(0,o.kt)("a",{id:"s2.13.1-definition"}),(0,o.kt)("a",{id:"2131-definition"}),(0,o.kt)("a",{id:"properties-definition"}),"#### 2.13.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u5f53\u8ba1\u7b97\u662f\u8f7b\u91cf\u7ea7\u65f6\uff0c\u5305\u88c5\u65b9\u6cd5\u7684\u65b9\u6cd5\u8c03\u7528getting\u548csetting\u5c5e\u6027\u53ef\u4f5c\u4e3a\u6807\u51c6\u5c5e\u6027\u8bbf\u95ee\u3002"),(0,o.kt)("a",{id:"s2.13.2-pros"}),(0,o.kt)("a",{id:"2132-pros"}),(0,o.kt)("a",{id:"properties-pros"}),"#### 2.13.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u901a\u8fc7\u6d88\u9664\u5bf9\u4e8e\u7b80\u5355\u6210\u5458\u53d8\u91cf\u7684\u663e\u6027\u8bfb\u53d6\u548c\u8bbe\u5b9a\u6765\u589e\u52a0\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\n\u53ef\u4ee5\u5b9e\u73b0\u5ef6\u8fdf\u52a0\u8f7d\u3002\n\u8003\u8651Python\u5f0f\u7684\u7c7b\u63a5\u53e3\u7ef4\u62a4\u3002\n\u5728\u6027\u80fd\u65b9\u9762\uff0c\u5f53\u8bbf\u95ee\u4e00\u4e2a\u76f4\u63a5\u53d8\u91cf\u65f6\uff0c\u4e5f\u5141\u8bb8\u7ed5\u8fc7\u9ebb\u70e6\u7684get\u65b9\u6cd5\u3002\n\u8fd9\u4e5f\u5141\u8bb8\u5c06\u6765\u5728\u4e0d\u7834\u574f\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0get\u65b9\u6cd5\u3002"),(0,o.kt)("a",{id:"s2.13.3-cons"}),(0,o.kt)("a",{id:"2133-cons"}),(0,o.kt)("a",{id:"properties-cons"}),"#### 2.13.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u5b83\u53ef\u4ee5\u50cf\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e00\u6837\u9690\u85cf\u526f\u4f5c\u7528\u3002\n\u5b50\u7c7b\u53ef\u80fd\u4f1a\u9020\u6210\u6df7\u6dc6\u3002"),(0,o.kt)("a",{id:"s2.13.4-decision"}),(0,o.kt)("a",{id:"2134-decision"}),(0,o.kt)("a",{id:"properties-decision"}),"#### 2.13.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u5f53\u8ba1\u7b97\u662f\u8f7b\u91cf\u7ea7\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528get\u548cset\u53bb\u8bbf\u95ee\u6d3b\u8bbe\u7f6e\u5c5e\u6027\u3002\n\u5728\u5b9a\u4e49\u5c5e\u6027\u65f6\uff0c\u8bf7\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"@property")," ",(0,o.kt)("a",{parentName:"p",href:"#s2.17-function-and-method-decorators"},"decorator"),"\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u5c5e\u6027\u4e0d\u9700\u8981\u88ab\u91cd\u8f7d\uff0c\u7ee7\u627f\u8be5\u5c5e\u6027\u53ef\u4ee5\u4e0d\u662f\u663e\u6027\u7684\u3002\n\u56e0\u6b64\uff0c\u5fc5\u987b\u786e\u4fdd\u95f4\u63a5\u8c03\u7528\u8bbf\u95ee\u5668\u65b9\u6cd5\u4ee5\u786e\u4fdd\u5b50\u7c7b\u4e2d\u8986\u76d6\u7684\u65b9\u6cd5\u88ab\u8c03\u7528",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Template_method_pattern"},"template method design pattern"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\u6b63: import math\n\n     class Square:\n         """\u4e00\u4e2a\u6b63\u65b9\u5f62\u5305\u62ec\u4e24\u4e2a\u5c5e\u6027: \u4e00\u4e2a\u53ef\u8bfb\u5199\u7684\u9762\u79ef\u548c\u4e00\u4e2a\u53ea\u8bfb\u7684\u5468\u957f.\n\n         \u7528\u4f8b:\n         >>> sq = Square(3)\n         >>> sq.area\n         9\n         >>> sq.perimeter\n         12\n         >>> sq.area = 16\n         >>> sq.side\n         4\n         >>> sq.perimeter\n         16\n         """\n\n         def __init__(self, side: float):\n             self.side = side\n\n         @property\n         def area(self) -> float:\n             """\u6b63\u65b9\u5f62\u7684\u9762\u79ef."""\n             return self._get_area()\n\n         @area.setter\n         def area(self, area: float):\n             self._set_area(area)\n\n         def _get_area(self) -> float:\n             """\u76f4\u63a5\u8bbf\u95eeside\u4ee5\u8ba1\u7b97\'area\'"""\n             return self.side ** 2\n\n         def _set_area(self, area: float):\n             """\u76f4\u63a5\u8bbe\u5b9a\u8fb9\u957f\'side\'"""\n             self.side = math.sqrt(area)\n\n         @property\n         def perimeter(self) -> float:\n             return self.side * 4\n')),(0,o.kt)("a",{id:"s2.14-truefalse-evaluations"}),(0,o.kt)("a",{id:"214-truefalse-evaluations"}),(0,o.kt)("a",{id:"truefalse-evaluations"}),"### 2.14 True/False \u5224\u5b9a",(0,o.kt)("p",null,"\u5982\u679c\u6709\u53ef\u80fd\uff0c\u4f7f\u7528\u9690\u5f0f\u7684Flase\u3002"),(0,o.kt)("a",{id:"s2.14.1-definition"}),(0,o.kt)("a",{id:"2141-definition"}),(0,o.kt)("a",{id:"truefalse-evaluations-definition"}),"#### 2.14.1 \u5b9a\u4e49",(0,o.kt)("p",null,"\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\uff0cPython \u5c06\u67d0\u4e9b\u503c\u88ab\u5224\u5b9a\u4e3a\u201cFalse\u201d\u3002\n\u6240\u6709\u7684\u7a7a\u503c\u88ab\u5224\u5b9a\u4e3aFlase\uff0c\u6240\u4ee5",(0,o.kt)("inlineCode",{parentName:"p"},"0, None, [], {}, ''"),"\u90fd\u88ab\u5224\u5b9a\u4e3aFlase\u3002"),(0,o.kt)("a",{id:"s2.14.2-pros"}),(0,o.kt)("a",{id:"2142-pros"}),(0,o.kt)("a",{id:"truefalse-evaluations-pros"}),"#### 2.14.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u4f7f\u7528Python\u5e03\u5c14\u503c\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\u66f4\u52a0\u5df2\u8bfb\u4e14\u4e0d\u6613\u51fa\u9519\u3002\n\u5f88\u591a\u65f6\u5019\u5b83\u6267\u884c\u8fd8\u66f4\u5feb\u3002"),(0,o.kt)("a",{id:"s2.14.3-cons"}),(0,o.kt)("a",{id:"2143-cons"}),(0,o.kt)("a",{id:"truefalse-evaluations-cons"}),"#### 2.14.3 \u7f3a\u70b9",(0,o.kt)("p",null,"C/C++ \u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u522b\u626d\u3002"),(0,o.kt)("a",{id:"s2.14.4-decision"}),(0,o.kt)("a",{id:"2144-decision"}),(0,o.kt)("a",{id:"truefalse-evaluations-decision"}),"#### 2.14.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f\u7684Flase\u3002\u4f8b\u5982\uff1a\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"if foo:"),"\uff0c\u800c\u4e0d\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"if foo != []:"),"\u3002\n\u4e0d\u8fc7\uff0c\u4f60\u8fd8\u5e94\u8be5\u8bb0\u4f4f\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u603b\u662f\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"if foo is None:")," (\u6216 ",(0,o.kt)("inlineCode",{parentName:"p"},"is not None"),") \u6765\u68c0\u67e5 ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," \u503c.\n\u4f8b\u5982\u5f53\u4f60\u60f3\u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u662f\u9ed8\u8ba4\u503c",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"\u8fd8\u662f\u5176\u4ed6\u4ec0\u4e48\u503c\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"=="),"\u6765\u6bd4\u8f83\u4e00\u4e2a\u5e03\u5c14\u503c\u662f\u5426\u4e3a",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"\u3002\n\u8bf7\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"if not x:"),"\u3002\n\u5982\u679c\u4f60\u60f3\u8981\u5374\u522b",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"\uff0c\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"if not x and x is not None:"),"\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5bf9\u4e8e\u5e8f\u5217 (strings, lists, tuples)\uff0c \u7a7a\u5e8f\u5217\u88ab\u5224\u5b9a\u4e3aFlase\u3002\n\u6240\u4ee5 ",(0,o.kt)("inlineCode",{parentName:"p"},"if seq:")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"if not seq:")," \u8981\u6bd4 ",(0,o.kt)("inlineCode",{parentName:"p"},"if len(seq):")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"if not len(seq):")," \u597d\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5982\u679c\u662f\u6574\u6570\u578b\uff0c\u6f5c\u5728Flase\u7684\u98ce\u9669\u5c06\u5927\u4e8e\u4f18\u70b9\u3002\uff08\u4f8b\u5982\uff0c\u53ef\u80fd\u65e0\u6cd5\u533a\u5206",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"\u548c0\uff09\u3002\n\u8fd9\u4e2a\u65f6\u5019\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u503c\u548c0\u505a\u6bd4\u8f83\u3002"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u6b63: if not users:\n         print('no users')\n\n     if foo == 0:\n         self.handle_zero()\n\n     if i % 10 == 0:\n         self.handle_multiple_of_ten()\n\n     def f(x=None):\n         if x is None:\n             x = []\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\u8bef:  if len(users) == 0:\n         print('no users')\n\n     if foo is not None and not foo:\n         self.handle_zero()\n\n     if not i % 10:\n         self.handle_multiple_of_ten()\n\n     def f(x=None):\n         x = x or []\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6ce8\u610f\uff0c ",(0,o.kt)("inlineCode",{parentName:"p"},"'0'")," ( ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32) \u5224\u5b9a\u4e3aTrue."))),(0,o.kt)("a",{id:"s2.16-lexical-scoping"}),(0,o.kt)("a",{id:"216-lexical-scoping"}),(0,o.kt)("a",{id:"lexical-scoping"}),"### 2.16 \u8bcd\u6cd5\u4f5c\u7528\u57df Lexical Scoping",(0,o.kt)("p",null,"\u53ef\u4ee5\u7528\u3002"),(0,o.kt)("a",{id:"s2.16.1-definition"}),(0,o.kt)("a",{id:"2161-definition"}),(0,o.kt)("a",{id:"lexical-scoping-definition"}),"#### 2.16.1 Definition",(0,o.kt)("p",null,"\u4e00\u4e2a\u5185\u5d4cPython\u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5176\u5916\u90e8\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u5bf9\u5176\u8d4b\u503c\u3002\n\u57fa\u4e8e\u9759\u6001\u7a0b\u5e8f\u6587\u672c\uff0c\u4f7f\u7528\u8bcd\u6cd5\u8303\u56f4\u89e3\u6790\u53d8\u91cf\u7ed1\u5b9a\u3002\n\u4efb\u4f55\u5bf9\u4e8e\u7a0b\u5e8f\u5feb\u91cc\u67d0\u4e2a\u53d8\u91cf\u540d\u7684\u590d\u5236\u90fd\u5c06\u5f15\u8d77Python\u5c06\u8be5\u540d\u79f0\u7684\u6240\u6709\u5f15\u7528\u89c6\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5373\u4f7f\u5bf9\u4e8e\u8be5\u53d8\u91cf\u7684\u8c03\u7528\u4f18\u5148\u4e8e\u5bf9\u5176\u8d4b\u503c\u3002\n\u5982\u679c\u51fa\u73b0\u4e00\u4e2a\u5168\u5c40\u7684\u53d8\u91cf\u5b9a\u4e49\uff0c\u8be5\u53d8\u91cf\u540d\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u3002"),(0,o.kt)("p",null,"\u4e0b\u9762\u7684\u7528\u4f8b\u8bf4\u660e\u8fd9\u4e2a\u73b0\u8c61:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def get_adder(summand1: float) -> Callable[[float], float]:\n    """\u8fd4\u56de\u4e00\u4e2a\u7528\u6765\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u51fd\u6570\u3002"""\n    def adder(summand2: float) -> float:\n        return summand1 + summand2\n\n    return adder\n')),(0,o.kt)("a",{id:"s2.16.2-pros"}),(0,o.kt)("a",{id:"2162-pros"}),(0,o.kt)("a",{id:"lexical-scoping-pros"}),"#### 2.16.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u4f7f\u7528\u8bcd\u6cd5\u4f5c\u7528\u57df\uff0c\u5176\u7ed3\u679c\u5f80\u5f80\u66f4\u6e05\u6670\uff0c\u4ee3\u7801\u66f4\u4f18\u96c5\u3002\n\u5b83\u7279\u522b\u9002\u5408Lisp\u548cScheme\u7684\u7a0b\u5e8f\u5458\u3002"),(0,o.kt)("a",{id:"s2.16.3-cons"}),(0,o.kt)("a",{id:"2163-cons"}),(0,o.kt)("a",{id:"lexical-scoping-cons"}),"#### 2.16.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5bfc\u81f4\u6df7\u4e71\u7684Bugs\u3002\n\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n",(0,o.kt)("a",{parentName:"p",href:"http://www.google.com/url?sa=D&q=http://www.python.org/dev/peps/pep-0227/"},"PEP-0227"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"i = 4\ndef foo(x: Iterable[int]):\n    def bar():\n        print(i, end='')\n    # ...\n    # \u4e00\u4e9b\u4ee3\u7801\n    # ...\n    for i in x:  # Ah, i *is* local to foo, so this is what bar sees\n        print(i, end='')\n    bar()\n")),(0,o.kt)("p",null,"\u6240\u4ee5 ",(0,o.kt)("inlineCode",{parentName:"p"},"foo([1, 2, 3])")," \u5c06\u6253\u5370 ",(0,o.kt)("inlineCode",{parentName:"p"},"1 2 3 3"),"\uff0c\u800c\u4e0d\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"1 2 3 4"),"\u3002"),(0,o.kt)("a",{id:"s2.16.4-decision"}),(0,o.kt)("a",{id:"2164-decision"}),(0,o.kt)("a",{id:"lexical-scoping-decision"}),"#### 2.16.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u53ef\u4ee5\u7528\u3002"),(0,o.kt)("a",{id:"s2.17-function-and-method-decorators"}),(0,o.kt)("a",{id:"217-function-and-method-decorators"}),(0,o.kt)("a",{id:"function-and-method-decorators"}),(0,o.kt)("a",{id:"decorators"}),"### 2.17 \u51fd\u6570\u548c\u65b9\u6cd5\u88c5\u9970\u5668 Decorators",(0,o.kt)("p",null,"\u4f7f\u7528\u88c5\u9970\u5668\u662f\u660e\u667a\u7684\u3002\n\u8981\u907f\u514d\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\uff0c\u9650\u5236\u4f7f\u7528\u7c7b\u65b9\u6cd5\u3002"),(0,o.kt)("a",{id:"s2.17.1-definition"}),(0,o.kt)("a",{id:"2171-definition"}),(0,o.kt)("a",{id:"decorators-definition"}),"#### 2.17.1 \u5b9a\u4e49",(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/glossary.html#term-decorator"},"\u51fd\u6570\u548c\u65b9\u6cd5\u88c5\u9970\u5668"),' (\u53c8\u79f0 "',(0,o.kt)("inlineCode",{parentName:"p"},"@"),' \u6ce8\u91ca")\u3002\n\u5176\u4e2d\u4e00\u4e2a\u901a\u7528\u7684\u88c5\u9970\u5668\u662f ',(0,o.kt)("inlineCode",{parentName:"p"},"@property"),"\uff0c\u7528\u4e8e\u5c06\u666e\u901a\u7684\u65b9\u6cd5\u8f6c\u6362\u4e3a\u52a8\u6001\u8ba1\u7b97\u5c5e\u6027\u3002\n\u4f46\u662f\uff0c\u8fd9\u79cd\u4fee\u9970\u7b26\u8fd8\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"my_decorator"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class C:\n    @my_decorator\n    def method(self):\n        # \u65b9\u6cd5\u4f53 ...\n")),(0,o.kt)("p",null,"\u7b49\u4ef7\u4e8e:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class C:\n    def method(self):\n        # \u65b9\u6cd5\u4f53 ...\n    method = my_decorator(method)\n")),(0,o.kt)("a",{id:"s2.17.2-pros"}),(0,o.kt)("a",{id:"2172-pros"}),(0,o.kt)("a",{id:"decorators-pros"}),"#### 2.17.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u8fd9\u4e9b\u8f6c\u6362\u53ef\u4ee5\u6d88\u9664\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801\uff0c\u5f3a\u5236\u6267\u884c\u4e0d\u53d8\u91cf\uff0c\u7b49\u7b49\u3002"),(0,o.kt)("a",{id:"s2.17.3-cons"}),(0,o.kt)("a",{id:"2173-cons"}),(0,o.kt)("a",{id:"decorators-cons"}),"#### 2.17.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u88c5\u9970\u5668\u80fd\u591f\u5728\u51fd\u6570\u5730\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4e0a\u6267\u884c\u4efb\u610f\u5730\u64cd\u4f5c\uff0c\u4e8e\u662f\u53ef\u80fd\u6210\u4e3a\u5bfc\u81f4\u5f02\u5e38\u884c\u4e3a\u7684\u9690\u60a3\u3002\n\u53e6\u5916\uff0c\u88c5\u9970\u5668\u4f1a\u5728Import\u7684\u9636\u6bb5\u6267\u884c\u3002\n\u88c5\u9970\u5668\u4ee3\u7801\u4e2d\u7684\u5931\u8d25\u51e0\u4e4e\u4e0d\u53ef\u80fd\u6062\u590d\u3002"),(0,o.kt)("a",{id:"s2.17.4-decision"}),(0,o.kt)("a",{id:"2174-decision"}),(0,o.kt)("a",{id:"decorators-decision"}),"#### 2.17.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u5408\u7406\u5730\u4f7f\u7528\u88c5\u9970\u5668\u4f1a\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u6e05\u6d01\u3002\n\u88c5\u9970\u5668\u4e5f\u5e94\u8be5\u4f7f\u7528\u548c\u51fd\u6570\u76f8\u540c\u7684import\u548c\u547d\u540d\u89c4\u5219\u3002\n\u88c5\u9970\u5668\u7684\u6587\u6863\u5e94\u8be5\u660e\u786e\u7684\u8bf4\u660e\u5b83\u662f\u4e00\u4e2a\u88c5\u9970\u5668\u3002\n\u88c5\u9970\u5668\u4e5f\u8981\u505a\u5355\u5143\u6d4b\u8bd5\u3002"),(0,o.kt)("p",null,"\u5728\u88c5\u9970\u5668\u91cc\u907f\u514d\u5916\u90e8\u4f9d\u8d56\uff08\u4f8b\u5982\uff0c\u4e0d\u8981\u64cd\u4f5c\u6587\u4ef6\uff0cSocket\uff0c\u6570\u636e\u5e93\u94fe\u63a5\u7b49\u7b49\uff09\uff0c\n\u56e0\u4e3a\u5f53\u88c5\u9970\u5668\u6267\u884c\u65f6\uff08\u5728\u5bfc\u5165\u9636\u6bb5\uff0c\u88c5\u9970\u5668\u53ef\u80fd\u88ab",(0,o.kt)("inlineCode",{parentName:"p"},"pydoc"),"\u6216\u5176\u4ed6\u5de5\u5177\u6267\u884c\uff09\uff0c\u5b83\u4eec\u53ef\u80fd\u8fd8\u65e0\u6cd5\u6b63\u5e38\u6267\u884c\u3002\n\u4f7f\u7528\u6709\u6548\u53c2\u6570\u8c03\u7528\u7684\u88c5\u9970\u5668\u5e94\u8be5\uff08\u5c3d\u53ef\u80fd\uff09\u4fdd\u8bc1\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u80fd\u6210\u529f\u3002"),(0,o.kt)("p",null,"\u88c5\u9970\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u201c\u9876\u5c42\u4ee3\u7801\u201d\uff0c\u53c2\u8003",(0,o.kt)("a",{parentName:"p",href:"#s3.17-main"},"main"),"\u3002"),(0,o.kt)("p",null,"\u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\uff0c\u9664\u975e\u662f\u8981\u5f3a\u5236\u6574\u5408\u5230\u4e00\u4e2a\u5df2\u77e5\u5e93\u7684API\u91cc\u3002"),(0,o.kt)("p",null,"\u4ec5\u5f53\u7f16\u5199\u547d\u540d\u6784\u9020\u51fd\u6570\u6216\u4fee\u6539\u5fc5\u8981\u7684\u5168\u5c40\u72b6\u6001\uff08\u4f8b\u5982\u8fdb\u7a0b\u7ea7\u7f13\u5b58\uff09\u7684\u7279\u5b9a\u4e8e\u7c7b\u7684\u4e8b\u52a1\u65f6\u624d\u4f7f\u7528\u7c7b\u65b9\u6cd5\u3002"),(0,o.kt)("a",{id:"s2.18-threading"}),(0,o.kt)("a",{id:"218-threading"}),(0,o.kt)("a",{id:"threading"}),"### 2.18 \u7ebf\u7a0b",(0,o.kt)("p",null,"\u4e0d\u8981\u4f9d\u8d56\u5185\u7f6e\u7c7b\u578b\u7684\u539f\u5b50\u6027\u3002"),(0,o.kt)("p",null,"\u867d\u7136 Python \u7684\u5185\u7f6e\u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982\u5b57\u5178\uff09\u4f3c\u4e4e\u5177\u6709\u539f\u5b50\u64cd\u4f5c\uff0c\u4f46\u6709\u7684\u65f6\u5019\u5b83\u5e76\u4e0d\u662f\u539f\u5b50\u6027\u7684\uff08\u4f8b\u5982\uff0c\u5982\u679c",(0,o.kt)("inlineCode",{parentName:"p"},"__hash__"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"__eq__"),"\u88ab\u901a\u8fc7Python\u65b9\u6cd5\u5b9e\u73b0\uff09\uff0c\u6240\u4ee5\u4e0d\u5e94\u8be5\u4ee5\u6765\u4ed6\u4eec\u7684\u539f\u5b50\u6027\u3002\n\u4f60\u4e5f\u4e0d\u5e94\u8be5\u4f9d\u8d56\u539f\u5b50\u6027\u5bf9\u53d8\u91cf\u8d4b\u503c\u3002"),(0,o.kt)("p",null,"\u4f7f\u7528\u961f\u5217\u6a21\u5757\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"Queue"),"\u7c7b\u578b\u53ef\u4ee5\u66f4\u597d\u7684\u5728\u7ebf\u7a0b\u4e4b\u95f4\u901a\u4fe1\u3002\n\u5426\u5219\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u6a21\u5757\u548c\u5176\u7ebf\u7a0b\u9501\u3002\n\u9996\u9009\u6761\u4ef6\u53d8\u91cf\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"threading.Condition"),"\u800c\u4e0d\u662f\u4f4e\u7ea7\u9501\u3002"),(0,o.kt)("a",{id:"s2.19-power-features"}),(0,o.kt)("a",{id:"219-power-features"}),(0,o.kt)("a",{id:"power-features"}),"### 2.19 \u9ad8\u7ea7\u7279\u6027 [Power Features](http://docs.pythonect.org/en/v0.6.0/tutorial/power.html)",(0,o.kt)("p",null,"\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u7279\u6027."),(0,o.kt)("a",{id:"s2.19.1-definition"}),(0,o.kt)("a",{id:"2191-definition"}),(0,o.kt)("a",{id:"power-features-definition"}),"#### 2.19.1 \u5b9a\u4e49",(0,o.kt)("p",null,"Python \u662f\u4e00\u4e2a\u975e\u5e38\u7075\u6d3b\u7684\u8bed\u8a00\uff0c\u5b83\u7ed9\u4e88\u4f60\u5f88\u591a\u4e30\u5bcc\u7684\u7279\u6027\uff0c\u4f8b\u5982\u81ea\u5b9a\u4e49\u5143\u7c7b\u578b\uff0c\u5b57\u8282\u7801\u8bbf\u95ee\uff0c\u5373\u65f6\u7f16\u8bd1\uff0c\n\u52a8\u6001\u7ee7\u627f\uff0c\u5bf9\u8c61\u518d\u9020\uff0cimport hacks\uff0c\u53cd\u5c04\uff08\u4f8b\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"getattr()"),"\uff09\uff0c\u4fee\u6539\u7cfb\u7edf\u5185\u4ef6\uff0c\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"__del__"),"\u5b9e\u73b0\n\u81ea\u5b9a\u4e49\u6e05\u7406\uff0c\u7b49\u7b49\u3002"),(0,o.kt)("a",{id:"s2.19.2-pros"}),(0,o.kt)("a",{id:"2192-pros"}),(0,o.kt)("a",{id:"power-features-pros"}),"#### 2.19.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u8fd9\u4e9b\u90fd\u662f\u5f3a\u529b\u8bed\u8a00\u7279\u6027\u3002\n\u5b83\u4eec\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002"),(0,o.kt)("a",{id:"s2.19.3-cons"}),(0,o.kt)("a",{id:"2193-cons"}),(0,o.kt)("a",{id:"power-features-cons"}),"#### 2.19.3 \u7f3a\u70b9",(0,o.kt)("p",null,"\u4f7f\u7528\u5f3a\u529b\u7279\u6027\u5f88\u9177\uff0c\u4f46\u5b83\u4eec\u4e0d\u4e00\u5b9a\u662f\u5fc5\u8981\u7684\u3002\n\u5b83\u4eec\u96be\u8bfb\u3001\u96be\u61c2\uff0c\u96be\u4ee5\u8c03\u8bd5\u3002\n\u8d77\u521d\u53ef\u80fd\u4e0d\u4f1a\u662f\u8fd9\u6837\uff08\u5bf9\u539f\u4f5c\u8005\u800c\u8a00\uff09\uff0c\u4f46\u5f53\u4f60\u91cd\u6e29\u4ee3\u7801\u65f6\uff0c\u5b83\u786e\u5b9e\u4f1a\u6bd4\u90a3\u4e9b\u76f4\u6765\u76f4\u53bb\u7684\u957f\u4ee3\u7801\u770b\u8d77\u6765\u590d\u6742\u3002"),(0,o.kt)("a",{id:"s2.19.4-decision"}),(0,o.kt)("a",{id:"2194-decision"}),(0,o.kt)("a",{id:"power-features-decision"}),"#### 2.19.4 \u7ed3\u8bba",(0,o.kt)("p",null,"\u907f\u514d\u4f7f\u7528\u9ad8\u7ea7\u7279\u6027\u3002"),(0,o.kt)("p",null,"\u57fa\u7840\u5e93\u6a21\u5757\u548c\u7c7b\u6240\u4f7f\u7528\u7684\u7279\u6027\u5c31\u53ef\u4ee5\u4e86\uff08\u4f8b\u5982\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"abc.ABCMeta"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dataclasses"),", \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"enum"),"\uff09\u3002"),(0,o.kt)("a",{id:"s2.20-modern-python"}),(0,o.kt)("a",{id:"220-modern-python"}),(0,o.kt)("a",{id:"modern-python"}),"### 2.20 \u5c06\u6765\u7684Python: from \\_\\_future\\_\\_ imports",(0,o.kt)("a",{id:"s2.20.1-definition"}),(0,o.kt)("a",{id:"2201-definition"}),(0,o.kt)("a",{id:"modern-python-definition"}),"#### 2.20.1 \u5b9a\u4e49",(0,o.kt)("p",null,"Python \u63d0\u4f9b\u4e86 ","_","_","future","_","_"," \u6a21\u5757\uff0c\u628a\u4e0b\u4e00\u4e2a\u65b0\u7248\u672c\u7684\u7279\u6027\u5bfc\u5165\u5230\u5f53\u524d\u7248\u672c\uff0c\n\u8fd9\u6837,\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5f53\u524d\u7248\u672c\u4e2d\u6d4b\u8bd5\u4e00\u4e9b\u65b0\u7248\u672c\u7684\u7279\u6027\u3002"),(0,o.kt)("a",{id:"s2.20.2-pros"}),(0,o.kt)("a",{id:"2202-pros"}),(0,o.kt)("a",{id:"modern-python-pros"}),"#### 2.20.2 \u4f18\u70b9",(0,o.kt)("p",null,"\u5df2\u7ecf\u8bc1\u660e\u5b83\u53ef\u4ee5\u8ba9\u7248\u672c\u5347\u7ea7\u66f4\u52a0\u5e73\u6ed1\u3002\n\u65b0\u7279\u6027\u66f4\u6613\u4e8e\u7ef4\u62a4\uff0c\u56e0\u4e3a\u5b83\u4e0d\u592a\u53ef\u80fd\u79ef\u7d2f\u5728\u672a\u6765\u8fd0\u884c\u65f6\u5347\u7ea7\u671f\u95f4\u4f1a\u51fa\u73b0\u95ee\u9898\u7684\u6280\u672f\u503a\u52a1\u3002"),(0,o.kt)("a",{id:"s2.20.3-cons"}),(0,o.kt)("a",{id:"2203-cons"}),(0,o.kt)("a",{id:"modern-python-cons"}),"#### 2.20.3 \u7f3a\u70b9 \u4e00\u4e9b\u4ee3\u7801\u53ef\u80fd\u65e0\u6cd5\u8fd0\u884c\u5728\u975e\u5e38\u65e7\u7684\u89e3\u6790\u5668\u4e0a\u3002 \u5728\u652f\u6301\u5927\u73af\u5883\u7684\u9879\u76ee\u4e2d\uff0c\u8fd9\u79cd\u9700\u6c42\u66f4\u4e3a\u5e38\u89c1\u3002",(0,o.kt)("a",{id:"s2.20.4-decision"}),(0,o.kt)("a",{id:"2204-decision"}),(0,o.kt)("a",{id:"modern-python-decision"}),"#### 2.20.4 \u7ed3\u8bba",(0,o.kt)("h5",{id:"from-__future__-imports"},"from ","_","_","future","_","_"," imports"),(0,o.kt)("p",null,"\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"from __future__ import")," \u8bed\u53e5\u662f\u88ab\u9f13\u52b1\u7684.\n\u5b83\u4f7f\u5f97\u4f7f\u7528Python\u672a\u6765\u7684\u8bed\u6cd5\u6210\u4e3a\u53ef\u80fd\u3002\n\u4e00\u65e6\u4f60\u8981\u5347\u7ea7\u4ee3\u7801\u65f6\uff0c\u53ea\u9700\u8981\u5220\u6389",(0,o.kt)("inlineCode",{parentName:"p"},"__future__"),"\u5373\u53ef\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u5728Python3.5\u4e0a\u8fd0\u884c\u4e00\u4e9b>= 3.7\u7279\u6027\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from __future__ import generator_stop\n")),(0,o.kt)("p",null,"\u5bf9\u4e8e\u6709\u7ee7\u7eed\u652f\u6301\u8d1f\u62c5\u76842.7\u9057\u7559\u4ee3\u7801\uff0c\u5bfc\u5165\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n")),(0,o.kt)("p",null,"\u53c2\u8003",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/__future__.html"},"Python\u7279\u6027\u8bed\u53e5\u5b9a\u4e49"),"\u3002"),(0,o.kt)("p",null,"\u77e5\u9053\u4f60\u786e\u4fe1\u4ee3\u7801\u80fd\u5728\u73b0\u5728\u7684\u73af\u5883\u4e2d\u4f7f\u7528\u4e4b\u524d\uff0c\u8bf7\u4e0d\u8981\u5220\u9664\u8fd9\u4e9b\u5bfc\u5165\u3002"),(0,o.kt)("p",null,"\u5373\u4f7f\u4f60\u76ee\u524d\u4e0d\u4f7f\u7528\u8be5\u529f\u80fd\uff0c\u7279\u5b9a\u7684\u672a\u6765\u7279\u6027\u4eca\u5929\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u542f\u7528\uff0c\u5c06\u5176\u4fdd\u7559\u5728\u6587\u4ef6\u4e2d\u53ef\u9632\u6b62\u4ee5\u540e\u7684\u4ee3\u7801\u4fee\u6539\u9519\u8bef\u3002"),(0,o.kt)("p",null,"Use other ",(0,o.kt)("inlineCode",{parentName:"p"},"from __future__")," import statements as you see fit. We did not include\n",(0,o.kt)("inlineCode",{parentName:"p"},"unicode_literals")," in our recommendations for 2.7 as it was not a clear win due\nto implicit default codec conversion consequences it introduced in many places\nwithin 2.7. Most dual-version 2-and-3 code was better off with explicit use of\n",(0,o.kt)("inlineCode",{parentName:"p"},"b''")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"u''")," bytes and unicode string literals where necessary."),(0,o.kt)("h5",{id:"the-six-future-and-past-libraries"},"The six, future, and past libraries"),(0,o.kt)("p",null,"When your project still needs to support use under both Python 2 and 3, use the\n",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/six/"},"six"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/future/"},"future"),", and\n",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/past/"},"past")," libraries as you see fit. They exist to\nmake your code cleaner and life easier."),(0,o.kt)("a",{id:"s2.21-type-annotated-code"}),(0,o.kt)("a",{id:"s2.21-typed-code"}),(0,o.kt)("a",{id:"221-type-annotated-code"}),(0,o.kt)("a",{id:"typed-code"}),(0,o.kt)("a",{id:"typed-code"}),"### 2.21 Type Annotated Code",(0,o.kt)("p",null,"You can annotate Python 3 code with type hints according to\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0484/"},"PEP-484"),", and type-check the code at\nbuild time with a type checking tool like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google/pytype"},"pytype"),"."),(0,o.kt)("p",null,"Type annotations can be in the source or in a\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0484/#stub-files"},"stub pyi file"),". Whenever\npossible, annotations should be in the source. Use pyi files for third-party or\nextension modules."),(0,o.kt)("a",{id:"s2.21.1-definition"}),(0,o.kt)("a",{id:"2211-definition"}),(0,o.kt)("a",{id:"typed-code-definition"}),"#### 2.21.1 Definition",(0,o.kt)("p",null,'Type annotations (or "type hints") are for function or method arguments and\nreturn values:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def func(a: int) -> List[int]:\n")),(0,o.kt)("p",null,"You can also declare the type of a variable using similar\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0526/"},"PEP-526")," syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a: SomeType = some_func()\n")),(0,o.kt)("p",null,"Or by using a type comment in code that must support legacy Python versions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a = some_func()  # type: SomeType\n")),(0,o.kt)("a",{id:"s2.21.2-pros"}),(0,o.kt)("a",{id:"2212-pros"}),(0,o.kt)("a",{id:"typed-code-pros"}),"#### 2.21.2 Pros",(0,o.kt)("p",null,"Type annotations improve the readability and maintainability of your code. The\ntype checker will convert many runtime errors to build-time errors, and reduce\nyour ability to use ",(0,o.kt)("a",{parentName:"p",href:"#power-features"},"Power Features"),"."),(0,o.kt)("a",{id:"s2.21.3-cons"}),(0,o.kt)("a",{id:"2213-cons"}),(0,o.kt)("a",{id:"typed-code-cons"}),"#### 2.21.3 Cons",(0,o.kt)("p",null,"You will have to keep the type declarations up to date.\nYou might see type errors that you think are\nvalid code. Use of a\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google/pytype"},"type checker"),"\nmay reduce your ability to use ",(0,o.kt)("a",{parentName:"p",href:"#power-features"},"Power Features"),"."),(0,o.kt)("a",{id:"s2.21.4-decision"}),(0,o.kt)("a",{id:"2214-decision"}),(0,o.kt)("a",{id:"typed-code-decision"}),"#### 2.21.4 Decision",(0,o.kt)("p",null,"You are strongly encouraged to enable Python type analysis when updating code.\nWhen adding or modifying public APIs, include type annotations and enable\nchecking via pytype in the build system. As static analysis is relatively new to\nPython, we acknowledge that undesired side-effects (such as\nwrongly\ninferred types) may prevent adoption by some projects. In those situations,\nauthors are encouraged to add a comment with a TODO or link to a bug describing\nthe issue(s) currently preventing type annotation adoption in the BUILD file or\nin the code itself as appropriate."),(0,o.kt)("a",{id:"s3-python-style-rules"}),(0,o.kt)("a",{id:"3-python-style-rules"}),(0,o.kt)("a",{id:"python-style-rules"}),"## 3 Python Style Rules",(0,o.kt)("a",{id:"s3.1-semicolons"}),(0,o.kt)("a",{id:"31-semicolons"}),(0,o.kt)("a",{id:"semicolons"}),"### 3.1 Semicolons",(0,o.kt)("p",null,"Do not terminate your lines with semicolons, and do not use semicolons to put\ntwo statements on the same line."),(0,o.kt)("a",{id:"s3.2-line-length"}),(0,o.kt)("a",{id:"32-line-length"}),(0,o.kt)("a",{id:"line-length"}),"### 3.2 Line length",(0,o.kt)("p",null,"Maximum line length is ",(0,o.kt)("em",{parentName:"p"},"80 characters"),"."),(0,o.kt)("p",null,"Explicit exceptions to the 80 character limit:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Long import statements."),(0,o.kt)("li",{parentName:"ul"},"URLs, pathnames, or long flags in comments."),(0,o.kt)("li",{parentName:"ul"},"Long string module level constants not containing whitespace that would be\ninconvenient to split across lines such as URLs or pathnames.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Pylint disable comments. (e.g.: ",(0,o.kt)("inlineCode",{parentName:"li"},"# pylint: disable=invalid-name"),")")))),(0,o.kt)("p",null,"Do not use backslash line continuation except for ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statements requiring\nthree or more context managers."),(0,o.kt)("p",null,"Make use of Python's\n",(0,o.kt)("a",{parentName:"p",href:"http://docs.python.org/reference/lexical_analysis.html#implicit-line-joining"},"implicit line joining inside parentheses, brackets and braces"),".\nIf necessary, you can add an extra pair of parentheses around an expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n     if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n")),(0,o.kt)("p",null,"When a literal string won't fit on a single line, use parentheses for implicit\nline joining."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"x = ('This will build a very long long '\n     'long long long long long long string')\n")),(0,o.kt)("p",null,"Within comments, put long URLs on their own line if necessary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:  # See details at\n      # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  # See details at\n     # http://www.example.com/us/developer/documentation/api/content/\\\n     # v2.0/csv_file_name_extension_full_specification.html\n")),(0,o.kt)("p",null,"It is permissible to use backslash continuation when defining a ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement\nwhose expressions span three or more lines. For two lines of expressions, use a\nnested ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:  with very_long_first_expression_function() as spam, \\\n           very_long_second_expression_function() as beans, \\\n           third_thing() as eggs:\n          place_order(eggs, beans, spam, beans)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  with VeryLongFirstExpressionFunction() as spam, \\\n          VeryLongSecondExpressionFunction() as beans:\n       PlaceOrder(beans, spam)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:  with very_long_first_expression_function() as spam:\n          with very_long_second_expression_function() as beans:\n              place_order(beans, spam)\n")),(0,o.kt)("p",null,"Make note of the indentation of the elements in the line continuation examples\nabove; see the ",(0,o.kt)("a",{parentName:"p",href:"#s3.4-indentation"},"indentation")," section for explanation."),(0,o.kt)("p",null,"In all other cases where a line exceeds 80 characters, and the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google/yapf/"},"yapf"),"\nauto-formatter does not help bring the line below the limit, the line is allowed\nto exceed this maximum. Authors are encouraged to manually break the line up per\nthe notes above when it is sensible."),(0,o.kt)("a",{id:"s3.3-parentheses"}),(0,o.kt)("a",{id:"33-parentheses"}),(0,o.kt)("a",{id:"parentheses"}),"### 3.3 Parentheses",(0,o.kt)("p",null,"Use parentheses sparingly."),(0,o.kt)("p",null,"It is fine, though not required, to use parentheses around tuples. Do not use\nthem in return statements or conditional statements unless using parentheses for\nimplied line continuation or to indicate a tuple."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: if foo:\n         bar()\n     while x:\n         x = bar()\n     if x and y:\n         bar()\n     if not x:\n         bar()\n     # For a 1 item tuple the ()s are more visually obvious than the comma.\n     onesie = (foo,)\n     return foo\n     return spam, beans\n     return (spam, beans)\n     for (x, y) in dict.items(): ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  if (x):\n         bar()\n     if not(x):\n         bar()\n     return (foo)\n")),(0,o.kt)("a",{id:"s3.4-indentation"}),(0,o.kt)("a",{id:"34-indentation"}),(0,o.kt)("a",{id:"indentation"}),"### 3.4 Indentation",(0,o.kt)("p",null,"Indent your code blocks with ",(0,o.kt)("em",{parentName:"p"},"4 spaces"),"."),(0,o.kt)("p",null,"Never use tabs or mix tabs and spaces. In cases of implied line continuation,\nyou should align wrapped elements either vertically, as per the examples in the\n",(0,o.kt)("a",{parentName:"p",href:"#s3.2-line-length"},"line length")," section; or using a hanging indent of 4 spaces,\nin which case there should be nothing after the open parenthesis or bracket on\nthe first line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:   # Aligned with opening delimiter\n       foo = long_function_name(var_one, var_two,\n                                var_three, var_four)\n       meal = (spam,\n               beans)\n\n       # Aligned with opening delimiter in a dictionary\n       foo = {\n           'long_dictionary_key': value1 +\n                                  value2,\n           ...\n       }\n\n       # 4-space hanging indent; nothing on first line\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four)\n       meal = (\n           spam,\n           beans)\n\n       # 4-space hanging indent in a dictionary\n       foo = {\n           'long_dictionary_key':\n               long_dictionary_value,\n           ...\n       }\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:    # Stuff on first line forbidden\n       foo = long_function_name(var_one, var_two,\n           var_three, var_four)\n       meal = (spam,\n           beans)\n\n       # 2-space hanging indent forbidden\n       foo = long_function_name(\n         var_one, var_two, var_three,\n         var_four)\n\n       # No hanging indent in a dictionary\n       foo = {\n           'long_dictionary_key':\n           long_dictionary_value,\n           ...\n       }\n")),(0,o.kt)("a",{id:"s3.4.1-trailing-comma"}),(0,o.kt)("a",{id:"s3.4.1-trailing-commas"}),(0,o.kt)("a",{id:"s3.4.1-trailing_comma"}),(0,o.kt)("a",{id:"s3.4.1-trailing_commas"}),(0,o.kt)("a",{id:"341-trailing_comma"}),(0,o.kt)("a",{id:"341-trailing_commas"}),(0,o.kt)("a",{id:"trailing_comma"}),(0,o.kt)("a",{id:"trailing_commas"}),(0,o.kt)("a",{id:"trailing-comma"}),"#### 3.4.1 Trailing commas in sequences of items?",(0,o.kt)("p",null,"Trailing commas in sequences of items are recommended only when the closing\ncontainer token ",(0,o.kt)("inlineCode",{parentName:"p"},"]"),", ",(0,o.kt)("inlineCode",{parentName:"p"},")"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"}")," does not appear on the same line as the final\nelement. The presence of a trailing comma is also used as a hint to our Python\ncode auto-formatter ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/yapf/"},"YAPF")," to direct it to auto-format the container\nof items to one item per line when the ",(0,o.kt)("inlineCode",{parentName:"p"},",")," after the final element is present."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:   golomb3 = [0, 1, 3]\nYes:   golomb4 = [\n           0,\n           1,\n           4,\n           6,\n       ]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:    golomb4 = [\n           0,\n           1,\n           4,\n           6\n       ]\n")),(0,o.kt)("a",{id:"s3.5-blank-lines"}),(0,o.kt)("a",{id:"35-blank-lines"}),(0,o.kt)("a",{id:"blank-lines"}),"### 3.5 Blank Lines",(0,o.kt)("p",null,"Two blank lines between top-level definitions, be they function or class\ndefinitions. One blank line between method definitions and between the ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),"\nline and the first method. No blank line following a ",(0,o.kt)("inlineCode",{parentName:"p"},"def")," line. Use single\nblank lines as you judge appropriate within functions or methods."),(0,o.kt)("a",{id:"s3.6-whitespace"}),(0,o.kt)("a",{id:"36-whitespace"}),(0,o.kt)("a",{id:"whitespace"}),"### 3.6 Whitespace",(0,o.kt)("p",null,"Follow standard typographic rules for the use of spaces around punctuation."),(0,o.kt)("p",null,"No whitespace inside parentheses, brackets or braces."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: spam(ham[1], {'eggs': 2}, [])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  spam( ham[ 1 ], { 'eggs': 2 }, [ ] )\n")),(0,o.kt)("p",null,"No whitespace before a comma, semicolon, or colon. Do use whitespace after a\ncomma, semicolon, or colon, except at the end of the line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: if x == 4:\n         print(x, y)\n     x, y = y, x\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  if x == 4 :\n         print(x , y)\n     x , y = y , x\n")),(0,o.kt)("p",null,"No whitespace before the open paren/bracket that starts an argument list,\nindexing or slicing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: spam(1)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  spam (1)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: dict['key'] = list[index]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  dict ['key'] = list [index]\n")),(0,o.kt)("p",null,"No trailing whitespace."),(0,o.kt)("p",null,"Surround binary operators with a single space on either side for assignment\n(",(0,o.kt)("inlineCode",{parentName:"p"},"="),"), comparisons (",(0,o.kt)("inlineCode",{parentName:"p"},"==, <, >, !=, <>, <=, >=, in, not in, is, is not"),"), and\nBooleans (",(0,o.kt)("inlineCode",{parentName:"p"},"and, or, not"),"). Use your better judgment for the insertion of spaces\naround arithmetic operators (",(0,o.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"//"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"**"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: x == 1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  x<1\n")),(0,o.kt)("p",null,"Never use spaces around ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," when passing keyword arguments or defining a default\nparameter value, with one exception:\n",(0,o.kt)("a",{parentName:"p",href:"#typing-default-values"},"when a type annotation is present"),", ",(0,o.kt)("em",{parentName:"p"},"do")," use spaces\naround the ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," for the default parameter value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: def complex(real, imag=0.0): return Magic(r=real, i=imag)\nYes: def complex(real, imag: float = 0.0): return Magic(r=real, i=imag)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  def complex(real, imag = 0.0): return Magic(r = real, i = imag)\nNo:  def complex(real, imag: float=0.0): return Magic(r = real, i = imag)\n")),(0,o.kt)("p",null,"Don't use spaces to vertically align tokens on consecutive lines, since it\nbecomes a maintenance burden (applies to ",(0,o.kt)("inlineCode",{parentName:"p"},":"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"#"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"="),", etc.):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\n  foo = 1000  # comment\n  long_name = 2  # comment that should not be aligned\n\n  dictionary = {\n      'foo': 1,\n      'long_name': 2,\n  }\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\n  foo       = 1000  # comment\n  long_name = 2     # comment that should not be aligned\n\n  dictionary = {\n      'foo'      : 1,\n      'long_name': 2,\n  }\n")),(0,o.kt)("a",{id:"Python_Interpreter"}),(0,o.kt)("a",{id:"s3.7-shebang-line"}),(0,o.kt)("a",{id:"37-shebang-line"}),(0,o.kt)("a",{id:"shebang-line"}),"### 3.7 Shebang Line",(0,o.kt)("p",null,"Most ",(0,o.kt)("inlineCode",{parentName:"p"},".py")," files do not need to start with a ",(0,o.kt)("inlineCode",{parentName:"p"},"#!")," line. Start the main file of a\nprogram with\n",(0,o.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env python3")," (to support virtualenvs) or ",(0,o.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/python3")," per\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0394/"},"PEP-394"),"."),(0,o.kt)("p",null,"This line is used by the kernel to find the Python interpreter, but is ignored by Python when importing modules. It is only necessary on a file intended to be executed directly."),(0,o.kt)("a",{id:"s3.8-comments-and-docstrings"}),(0,o.kt)("a",{id:"s3.8-comments"}),(0,o.kt)("a",{id:"38-comments-and-docstrings"}),(0,o.kt)("a",{id:"documentation"}),"### 3.8 Comments and Docstrings",(0,o.kt)("p",null,"Be sure to use the right style for module, function, method docstrings and\ninline comments."),(0,o.kt)("a",{id:"s3.8.1-comments-in-doc-strings"}),(0,o.kt)("a",{id:"381-docstrings"}),(0,o.kt)("a",{id:"comments-in-doc-strings"}),(0,o.kt)("a",{id:"docstrings"}),"#### 3.8.1 Docstrings",(0,o.kt)("p",null,"Python uses ",(0,o.kt)("em",{parentName:"p"},"docstrings")," to document code. A docstring is a string that is the\nfirst statement in a package, module, class or function. These strings can be\nextracted automatically through the ",(0,o.kt)("inlineCode",{parentName:"p"},"__doc__")," member of the object and are used\nby ",(0,o.kt)("inlineCode",{parentName:"p"},"pydoc"),".\n(Try running ",(0,o.kt)("inlineCode",{parentName:"p"},"pydoc")," on your module to see how it looks.) Always use the three\ndouble-quote ",(0,o.kt)("inlineCode",{parentName:"p"},'"""')," format for docstrings (per\n",(0,o.kt)("a",{parentName:"p",href:"https://www.google.com/url?sa=D&q=http://www.python.org/dev/peps/pep-0257/"},"PEP 257"),").\nA docstring should be organized as a summary line (one physical line not\nexceeding 80 characters) terminated by a period, question mark, or exclamation\npoint. When writing more (encouraged), this must be followed by a blank line,\nfollowed by the rest of the docstring starting at the same cursor position as\nthe first quote of the first line. There are more formatting guidelines for\ndocstrings below."),(0,o.kt)("a",{id:"s3.8.2-comments-in-modules"}),(0,o.kt)("a",{id:"382-modules"}),(0,o.kt)("a",{id:"comments-in-modules"}),(0,o.kt)("a",{id:"module-docs"}),"#### 3.8.2 Modules",(0,o.kt)("p",null,"Every file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL)"),(0,o.kt)("p",null,"Files should start with a docstring describing the contents and usage of the\nmodule."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'"""A one line summary of the module or program, terminated by a period.\n\nLeave one blank line.  The rest of this docstring should contain an\noverall description of the module or program.  Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\n  Typical usage example:\n\n  foo = ClassFoo()\n  bar = foo.FunctionBar()\n"""\n')),(0,o.kt)("a",{id:"s3.8.3-functions-and-methods"}),(0,o.kt)("a",{id:"383-functions-and-methods"}),(0,o.kt)("a",{id:"functions-and-methods"}),(0,o.kt)("a",{id:"function-docs"}),"#### 3.8.3 Functions and Methods",(0,o.kt)("p",null,'In this section, "function" means a method, function, or generator.'),(0,o.kt)("p",null,"A function must have a docstring, unless it meets all of the following criteria:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"not externally visible"),(0,o.kt)("li",{parentName:"ul"},"very short"),(0,o.kt)("li",{parentName:"ul"},"obvious")),(0,o.kt)("p",null,"A docstring should give enough information to write a call to the function\nwithout reading the function's code. The docstring should describe the\nfunction's calling syntax and its semantics, but generally not its\nimplementation details, unless those details are relevant to how the function is\nto be used. For example, a function that mutates one of its arguments as a side\neffect should note that in its docstring. Otherwise, subtle but important\ndetails of a function's implementation that are not relevant to the caller are\nbetter expressed as comments alongside the code than within the function's\ndocstring."),(0,o.kt)("p",null,"The docstring should be descriptive-style (",(0,o.kt)("inlineCode",{parentName:"p"},'"""Fetches rows from a\nBigtable."""'),") rather than imperative-style (",(0,o.kt)("inlineCode",{parentName:"p"},'"""Fetch rows from a\nBigtable."""'),"). The docstring for a ",(0,o.kt)("inlineCode",{parentName:"p"},"@property")," data descriptor should use the\nsame style as the docstring for an attribute or a"),(0,o.kt)("a",{href:"#doc-function-args"},"function argument"),' (`"""The Bigtable path."""`, rather than `"""Returns the Bigtable path."""`).',(0,o.kt)("p",null,"A method that overrides a method from a base class may have a simple docstring\nsending the reader to its overridden method's docstring, such as ",(0,o.kt)("inlineCode",{parentName:"p"},'"""See base\nclass."""'),". The rationale is that there is no need to repeat in many places\ndocumentation that is already present in the base method's docstring. However,\nif the overriding method's behavior is substantially different from the\noverridden method, or details need to be provided (e.g., documenting additional\nside effects), a docstring with at least those differences is required on the\noverriding method."),(0,o.kt)("p",null,"Certain aspects of a function should be documented in special sections, listed\nbelow. Each section begins with a heading line, which ends with a colon. All\nsections other than the heading should maintain a hanging indent of two or four\nspaces (be consistent within a file). These sections can be omitted in cases\nwhere the function's name and signature are informative enough that it can be\naptly described using a one-line docstring."),(0,o.kt)("a",{id:"doc-function-args"}),"[*Args:*](#doc-function-args) :   List each parameter by name. A description should follow the name, and be separated by a colon followed by either a space or newline. If the description is too long to fit on a single 80-character line, use a hanging indent of 2 or 4 spaces more than the parameter name (be consistent with the rest of the docstrings in the file). The description should include required type(s) if the code does not contain a corresponding type annotation. If a function accepts `*foo` (variable length argument lists) and/or `**bar` (arbitrary keyword arguments), they should be listed as `*foo` and `**bar`.",(0,o.kt)("a",{id:"doc-function-returns"}),'[*Returns:* (or *Yields:* for generators)](#doc-function-returns) :   Describe the type and semantics of the return value. If the function only returns None, this section is not required. It may also be omitted if the docstring starts with Returns or Yields (e.g. `"""Returns row from Bigtable as a tuple of strings."""`) and the opening sentence is sufficient to describe return value.',(0,o.kt)("a",{id:"doc-function-raises"}),"[*Raises:*](#doc-function-raises) :   List all exceptions that are relevant to the interface followed by a description. Use a similar exception name + colon + space or newline and hanging indent style as described in *Args:*. You should not document exceptions that get raised if the API specified in the docstring is violated (because this would paradoxically make behavior under violation of the API part of the API).",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_smalltable_rows(table_handle: smalltable.Table,\n                          keys: Sequence[Union[bytes, str]],\n                          require_all_keys: bool = False,\n) -> Mapping[bytes, Tuple[str]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n        table_handle: An open smalltable.Table instance.\n        keys: A sequence of strings representing the key of each table\n          row to fetch.  String keys will be UTF-8 encoded.\n        require_all_keys: Optional; If require_all_keys is True only\n          rows with values set for all keys will be returned.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b'Serak': ('Rigel VII', 'Preparer'),\n         b'Zim': ('Irk', 'Invader'),\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        Returned keys are always bytes.  If a key from the keys argument is\n        missing from the dictionary, then that row was not found in the\n        table (and require_all_keys must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the smalltable.\n    \"\"\"\n")),(0,o.kt)("p",null,"Similarly, this variation on ",(0,o.kt)("inlineCode",{parentName:"p"},"Args:")," with a line break is also allowed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_smalltable_rows(table_handle: smalltable.Table,\n                          keys: Sequence[Union[bytes, str]],\n                          require_all_keys: bool = False,\n) -> Mapping[bytes, Tuple[str]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n      table_handle:\n        An open smalltable.Table instance.\n      keys:\n        A sequence of strings representing the key of each table row to\n        fetch.  String keys will be UTF-8 encoded.\n      require_all_keys:\n        Optional; If require_all_keys is True only rows with values set\n        for all keys will be returned.\n\n    Returns:\n      A dict mapping keys to the corresponding table row data\n      fetched. Each row is represented as a tuple of strings. For\n      example:\n\n      {b'Serak': ('Rigel VII', 'Preparer'),\n       b'Zim': ('Irk', 'Invader'),\n       b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n      Returned keys are always bytes.  If a key from the keys argument is\n      missing from the dictionary, then that row was not found in the\n      table (and require_all_keys must have been False).\n\n    Raises:\n      IOError: An error occurred accessing the smalltable.\n    \"\"\"\n")),(0,o.kt)("a",{id:"s3.8.4-comments-in-classes"}),(0,o.kt)("a",{id:"384-classes"}),(0,o.kt)("a",{id:"comments-in-classes"}),(0,o.kt)("a",{id:"class-docs"}),"#### 3.8.4 Classes",(0,o.kt)("p",null,"Classes should have a docstring below the class definition describing the class.\nIf your class has public attributes, they should be documented here in an\n",(0,o.kt)("inlineCode",{parentName:"p"},"Attributes")," section and follow the same formatting as a\n",(0,o.kt)("a",{parentName:"p",href:"#doc-function-args"},"function's ",(0,o.kt)("inlineCode",{parentName:"a"},"Args"))," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class SampleClass:\n    """Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    """\n\n    def __init__(self, likes_spam: bool = False):\n        """Inits SampleClass with blah."""\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        """Performs operation blah."""\n')),(0,o.kt)("a",{id:"s3.8.5-block-and-inline-comments"}),(0,o.kt)("a",{id:"comments-in-block-and-inline"}),(0,o.kt)("a",{id:"s3.8.5-comments-in-block-and-inline"}),(0,o.kt)("a",{id:"385-block-and-inline-comments"}),(0,o.kt)("a",{id:"comments"}),"#### 3.8.5 Block and Inline Comments",(0,o.kt)("p",null,"The final place to have comments is in tricky parts of the code. If you're going\nto have to explain it at the next ",(0,o.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Code_review"},"code review"),",\nyou should comment it now. Complicated operations get a few lines of comments\nbefore the operations commence. Non-obvious ones get comments at the end of the\nline."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i & (i-1) == 0:  # True if i is 0 or a power of 2.\n")),(0,o.kt)("p",null,"To improve legibility, these comments should start at least 2 spaces away from\nthe code with the comment character ",(0,o.kt)("inlineCode",{parentName:"p"},"#"),", followed by at least one space before\nthe text of the comment itself."),(0,o.kt)("p",null,"On the other hand, never describe the code. Assume the person reading the code\nknows Python (though not what you're trying to do) better than you do."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# BAD COMMENT: Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n")),(0,o.kt)("a",{id:"s3.8.6-punctuation-spelling-and-grammar"}),(0,o.kt)("a",{id:"386-punctuation-spelling-and-grammar"}),(0,o.kt)("a",{id:"spelling"}),(0,o.kt)("a",{id:"punctuation"}),(0,o.kt)("a",{id:"grammar"}),(0,o.kt)("a",{id:"punctuation-spelling-grammar"}),"#### 3.8.6 Punctuation, Spelling, and Grammar",(0,o.kt)("p",null,"Pay attention to punctuation, spelling, and grammar; it is easier to read\nwell-written comments than badly written ones."),(0,o.kt)("p",null,"Comments should be as readable as narrative text, with proper capitalization and\npunctuation. In many cases, complete sentences are more readable than sentence\nfragments. Shorter comments, such as comments at the end of a line of code, can\nsometimes be less formal, but you should be consistent with your style."),(0,o.kt)("p",null,"Although it can be frustrating to have a code reviewer point out that you are\nusing a comma when you should be using a semicolon, it is very important that\nsource code maintain a high level of clarity and readability. Proper\npunctuation, spelling, and grammar help with that goal."),(0,o.kt)("a",{id:"s3.10-strings"}),(0,o.kt)("a",{id:"310-strings"}),(0,o.kt)("a",{id:"strings"}),"### 3.10 Strings",(0,o.kt)("p",null,"Use an\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/reference/lexical_analysis.html#f-strings"},"f-string"),",\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"%")," operator, or the ",(0,o.kt)("inlineCode",{parentName:"p"},"format")," method for formatting strings, even when the\nparameters are all strings. Use your best judgment to decide between ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),"\n(or ",(0,o.kt)("inlineCode",{parentName:"p"},"format"),") though. Do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"%")," or the ",(0,o.kt)("inlineCode",{parentName:"p"},"format")," method for pure\nconcatenation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: x = a + b\n     x = '%s, %s!' % (imperative, expletive)\n     x = '{}, {}'.format(first, second)\n     x = 'name: %s; score: %d' % (name, n)\n     x = 'name: {}; score: {}'.format(name, n)\n     x = f'name: {name}; score: {n}'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No: x = '%s%s' % (a, b)  # use + in this case\n    x = '{}{}'.format(a, b)  # use + in this case\n    x = first + ', ' + second\n    x = 'name: ' + name + '; score: ' + str(n)\n")),(0,o.kt)("p",null,"Avoid using the ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"+=")," operators to accumulate a string within a loop. In\nsome conditions, accumulating a string with addition can lead to quadratic\nrather than linear running time. Although common accumulations of this sort may\nbe optimized on CPython, that is an implementation detail. The conditions under\nwhich an optimization applies are not easy to predict and may change. Instead,\nadd each substring to a list and ",(0,o.kt)("inlineCode",{parentName:"p"},"''.join")," the list after the loop terminates,\nor write each substring to an ",(0,o.kt)("inlineCode",{parentName:"p"},"io.StringIO")," buffer. These techniques\nconsistently have amortized-linear run time complexity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: items = ['<table>']\n     for last_name, first_name in employee_list:\n         items.append('<tr><td>%s, %s</td></tr>' % (last_name, first_name))\n     items.append('</table>')\n     employee_table = ''.join(items)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No: employee_table = '<table>'\n    for last_name, first_name in employee_list:\n        employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name)\n    employee_table += '</table>'\n")),(0,o.kt)("p",null,"Be consistent with your choice of string quote character within a file. Pick ",(0,o.kt)("inlineCode",{parentName:"p"},"'"),"\nor ",(0,o.kt)("inlineCode",{parentName:"p"},'"')," and stick with it. It is okay to use the other quote character on a\nstring to avoid the need to ",(0,o.kt)("inlineCode",{parentName:"p"},"\\\\ ")," escape within the string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\n  Python('Why are you hiding your eyes?')\n  Gollum(\"I'm scared of lint errors.\")\n  Narrator('\"Good!\" thought a happy Python reviewer.')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'No:\n  Python("Why are you hiding your eyes?")\n  Gollum(\'The lint. It burns. It burns us.\')\n  Gollum("Always the great lint. Watching. Watching.")\n')),(0,o.kt)("p",null,"Prefer ",(0,o.kt)("inlineCode",{parentName:"p"},'"""')," for multi-line strings rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"'''"),". Projects may choose to\nuse ",(0,o.kt)("inlineCode",{parentName:"p"},"'''")," for all non-docstring multi-line strings if and only if they also use\n",(0,o.kt)("inlineCode",{parentName:"p"},"'")," for regular strings. Docstrings must use ",(0,o.kt)("inlineCode",{parentName:"p"},'"""')," regardless."),(0,o.kt)("p",null,"Multi-line strings do not flow with the indentation of the rest of the program.\nIf you need to avoid embedding extra space in the string, use either\nconcatenated single-line strings or a multi-line string with\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/textwrap.html#textwrap.dedent"},(0,o.kt)("inlineCode",{parentName:"a"},"textwrap.dedent()")),"\nto remove the initial space on each line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'  No:\n  long_string = """This is pretty ugly.\nDon\'t do this.\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'  Yes:\n  long_string = """This is fine if your use case can accept\n      extraneous leading spaces."""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'  Yes:\n  long_string = ("And this is fine if you cannot accept\\n" +\n                 "extraneous leading spaces.")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'  Yes:\n  long_string = ("And this too is fine if you cannot accept\\n"\n                 "extraneous leading spaces.")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'  Yes:\n  import textwrap\n\n  long_string = textwrap.dedent("""\\\n      This is also fine, because textwrap.dedent()\n      will collapse common leading spaces in each line.""")\n')),(0,o.kt)("a",{id:"s3.10.1-logging"}),(0,o.kt)("a",{id:"3101-logging"}),(0,o.kt)("a",{id:"logging"}),(0,o.kt)("a",{id:"logging"}),"#### 3.10.1 Logging",(0,o.kt)("p",null,"For logging functions that expect a pattern-string (with %-placeholders) as\ntheir first argument: Always call them with a string literal (not an f-string!)\nas their first argument with pattern-parameters as subsequent arguments. Some\nlogging implementations collect the unexpanded pattern-string as a queryable\nfield. It also prevents spending time rendering a message that no logger is\nconfigured to output."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"  Yes:\n  import tensorflow as tf\n  logger = tf.get_logger()\n  logger.info('TensorFlow Version is: %s', tf.__version__)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"  Yes:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is: %s', os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error('Cannot write to home directory, $HOME=%r', homedir)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"  No:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is:')\n  logging.info(os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error(f'Cannot write to home directory, $HOME={homedir!r}')\n")),(0,o.kt)("a",{id:"s3.10.2-error-messages"}),(0,o.kt)("a",{id:"3102-error-messages"}),(0,o.kt)("a",{id:"error-messages"}),(0,o.kt)("a",{id:"error-messages"}),"#### 3.10.2 Error Messages",(0,o.kt)("p",null,"Error messages (such as: message strings on exceptions like ",(0,o.kt)("inlineCode",{parentName:"p"},"ValueError"),", or\nmessages shown to the user) should follow three guidelines:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The message needs to precisely match the actual error condition.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Interpolated pieces need to always be clearly identifiable as such.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"They should allow simple automated processing (e.g. grepping)."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"  Yes:\n  if not 0 <= p <= 1:\n    raise ValueError(f'Not a probability: {p!r}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError as error:\n    logging.warning('Could not remove directory (reason: %r): %r',\n                    error, workdir)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"  No:\n  if p < 0 or p > 1:  # PROBLEM: also false for float('nan')!\n    raise ValueError(f'Not a probability: {p!r}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: Message makes an assumption that might not be true:\n    # Deletion might have failed for some other reason, misleading\n    # whoever has to debug this.\n    logging.warning('Directory already was deleted: %s', workdir)\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: The message is harder to grep for than necessary, and\n    # not universally non-confusing for all possible values of `workdir`.\n    # Imagine someone calling a library function with such code\n    # using a name such as workdir = 'deleted'. The warning would read:\n    # \"The deleted directory could not be deleted.\"\n    logging.warning('The %s directory could not be deleted.', workdir)\n")),(0,o.kt)("a",{id:"s3.11-files-sockets-closeables"}),(0,o.kt)("a",{id:"s3.11-files-and-sockets"}),(0,o.kt)("a",{id:"311-files-and-sockets"}),(0,o.kt)("a",{id:"files-and-sockets"}),(0,o.kt)("a",{id:"files"}),"### 3.11 Files, Sockets, and similar Stateful Resources",(0,o.kt)("p",null,"Explicitly close files and sockets when done with them. This rule naturally\nextends to closeable resources that internally use sockets, such as database\nconnections, and also other resources that need to be closed down in a similar\nfashion. To name only a few examples, this also includes\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/mmap.html"},"mmap")," mappings,\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.h5py.org/en/stable/high/file.html"},"h5py File objects"),", and\n",(0,o.kt)("a",{parentName:"p",href:"https://matplotlib.org/2.1.0/api/_as_gen/matplotlib.pyplot.close.html"},"matplotlib.pyplot figure windows"),"."),(0,o.kt)("p",null,"Leaving files, sockets or other such stateful objects open unnecessarily has\nmany downsides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"They may consume limited system resources, such as file descriptors. Code\nthat deals with many such objects may exhaust those resources unnecessarily\nif they're not returned to the system promptly after use."),(0,o.kt)("li",{parentName:"ul"},"Holding files open may prevent other actions such as moving or deleting\nthem, or unmounting a filesystem."),(0,o.kt)("li",{parentName:"ul"},"Files and sockets that are shared throughout a program may inadvertently be\nread from or written to after logically being closed. If they are actually\nclosed, attempts to read or write from them will raise exceptions, making\nthe problem known sooner.")),(0,o.kt)("p",null,"Furthermore, while files and sockets (and some similarly behaving resources) are\nautomatically closed when the object is destructed, coupling the lifetime of the\nobject to the state of the resource is poor practice:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There are no guarantees as to when the runtime will actually invoke the\n",(0,o.kt)("inlineCode",{parentName:"li"},"__del__")," method. Different Python implementations use different memory\nmanagement techniques, such as delayed garbage collection, which may\nincrease the object's lifetime arbitrarily and indefinitely."),(0,o.kt)("li",{parentName:"ul"},"Unexpected references to the file, e.g. in globals or exception tracebacks,\nmay keep it around longer than intended.")),(0,o.kt)("p",null,"Relying on finalizers to do automatic cleanup that has observable side effects\nhas been rediscovered over and over again to lead to major problems, across many\ndecades and multiple languages (see e.g.\n",(0,o.kt)("a",{parentName:"p",href:"https://wiki.sei.cmu.edu/confluence/display/java/MET12-J.+Do+not+use+finalizers"},"this article"),"\nfor Java)."),(0,o.kt)("p",null,"The preferred way to manage files and similar resources is using the\n",(0,o.kt)("a",{parentName:"p",href:"http://docs.python.org/reference/compound_stmts.html#the-with-statement"},(0,o.kt)("inlineCode",{parentName:"a"},"with")," statement"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'with open("hello.txt") as hello_file:\n    for line in hello_file:\n        print(line)\n')),(0,o.kt)("p",null,"For file-like objects that do not support the ",(0,o.kt)("inlineCode",{parentName:"p"},"with")," statement, use\n",(0,o.kt)("inlineCode",{parentName:"p"},"contextlib.closing()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import contextlib\n\nwith contextlib.closing(urllib.urlopen("http://www.python.org/")) as front_page:\n    for line in front_page:\n        print(line)\n')),(0,o.kt)("p",null,"In rare cases where context-based resource management is infeasible, code\ndocumentation must explain clearly how resource lifetime is managed."),(0,o.kt)("a",{id:"s3.12-todo-comments"}),(0,o.kt)("a",{id:"312-todo-comments"}),(0,o.kt)("a",{id:"todo"}),"### 3.12 TODO Comments",(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," comments for code that is temporary, a short-term solution, or\ngood-enough but not perfect."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," comment begins with the string ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," in all caps and a parenthesized\nname, e-mail address, or other identifier\nof the person or issue with the best context about the problem. This is followed\nby an explanation of what there is to do."),(0,o.kt)("p",null,"The purpose is to have a consistent ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," format that can be searched to find\nout how to get more details. A ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO")," is not a commitment that the person\nreferenced will fix the problem. Thus when you create a\n",(0,o.kt)("inlineCode",{parentName:"p"},"TODO"),", it is almost always your name\nthat is given."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# TODO(kl@gmail.com): Use a "*" here for string repetition.\n# TODO(Zeke) Change this to use relations.\n')),(0,o.kt)("p",null,"If your ",(0,o.kt)("inlineCode",{parentName:"p"},"TODO"),' is of the form "At a future date do something" make sure that you\neither include a very specific date ("Fix by November 2009") or a very specific\nevent ("Remove this code when all clients can handle XML responses.").'),(0,o.kt)("a",{id:"s3.13-imports-formatting"}),(0,o.kt)("a",{id:"313-imports-formatting"}),(0,o.kt)("a",{id:"imports-formatting"}),"### 3.13 Imports formatting",(0,o.kt)("p",null,"Imports should be on separate lines; there are\n",(0,o.kt)("a",{parentName:"p",href:"#typing-imports"},"exceptions for ",(0,o.kt)("inlineCode",{parentName:"a"},"typing")," imports"),"."),(0,o.kt)("p",null,"E.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes: import os\n     import sys\n     from typing import Mapping, Sequence\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:  import os, sys\n")),(0,o.kt)("p",null,"Imports are always put at the top of the file, just after any module comments\nand docstrings and before module globals and constants. Imports should be\ngrouped from most generic to least generic:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Python future import statements. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n")),(0,o.kt)("p",{parentName:"li"},"See ",(0,o.kt)("a",{parentName:"p",href:"#from-future-imports"},"above")," for more information about those.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Python standard library imports. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/"},"third-party")," module\nor package imports. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import tensorflow as tf\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Code repository\nsub-package imports. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from otherproject.ai import mind\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Deprecated:")," application-specific imports that are part of the same\ntop level\nsub-package as this file. For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from myproject.backend.hgwells import time_machine\n")),(0,o.kt)("p",{parentName:"li"},"You may find older Google Python Style code doing this, but it is no longer\nrequired. ",(0,o.kt)("strong",{parentName:"p"},"New code is encouraged not to bother with this.")," Simply treat\napplication-specific sub-package imports the same as other sub-package\nimports."))),(0,o.kt)("p",null,"Within each grouping, imports should be sorted lexicographically, ignoring case,\naccording to each module's full package path (the ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"from path import\n..."),"). Code may optionally place a blank line between import sections."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import collections\nimport queue\nimport sys\n\nfrom absl import app\nfrom absl import flags\nimport bs4\nimport cryptography\nimport tensorflow as tf\n\nfrom book.genres import scifi\nfrom myproject.backend import huxley\nfrom myproject.backend.hgwells import time_machine\nfrom myproject.backend.state_machine import main_loop\nfrom otherproject.ai import body\nfrom otherproject.ai import mind\nfrom otherproject.ai import soul\n\n# Older style code may have these imports down here instead:\n#from myproject.backend.hgwells import time_machine\n#from myproject.backend.state_machine import main_loop\n")),(0,o.kt)("a",{id:"s3.14-statements"}),(0,o.kt)("a",{id:"314-statements"}),(0,o.kt)("a",{id:"statements"}),"### 3.14 Statements",(0,o.kt)("p",null,"Generally only one statement per line."),(0,o.kt)("p",null,"However, you may put the result of a test on the same line as the test only if\nthe entire statement fits on one line. In particular, you can never do so with\n",(0,o.kt)("inlineCode",{parentName:"p"},"try"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"except")," since the ",(0,o.kt)("inlineCode",{parentName:"p"},"try")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"except")," can't both fit on the same line, and\nyou can only do so with an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," if there is no ",(0,o.kt)("inlineCode",{parentName:"p"},"else"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\n\n  if foo: bar(foo)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\n\n  if foo: bar(foo)\n  else:   baz(foo)\n\n  try:               bar(foo)\n  except ValueError: baz(foo)\n\n  try:\n      bar(foo)\n  except ValueError: baz(foo)\n")),(0,o.kt)("a",{id:"s3.15-accessors"}),(0,o.kt)("a",{id:"s3.15-access-control"}),(0,o.kt)("a",{id:"315-access-control"}),(0,o.kt)("a",{id:"access-control"}),(0,o.kt)("a",{id:"accessors"}),"### 3.15 Accessors",(0,o.kt)("p",null,"If an accessor function would be trivial, you should use public variables\ninstead of accessor functions to avoid the extra cost of function calls in\nPython. When more functionality is added you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"property")," to keep the\nsyntax consistent."),(0,o.kt)("p",null,"On the other hand, if access is more complex, or the cost of accessing the\nvariable is significant, you should use function calls (following the\n",(0,o.kt)("a",{parentName:"p",href:"#s3.16-naming"},"Naming")," guidelines) such as ",(0,o.kt)("inlineCode",{parentName:"p"},"get_foo()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set_foo()"),". If the\npast behavior allowed access through a property, do not bind the new accessor\nfunctions to the property. Any code still attempting to access the variable by\nthe old method should break visibly so they are made aware of the change in\ncomplexity."),(0,o.kt)("a",{id:"s3.16-naming"}),(0,o.kt)("a",{id:"316-naming"}),(0,o.kt)("a",{id:"naming"}),"### 3.16 Naming",(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"module_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"package_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ClassName"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"method_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ExceptionName"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"function_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"GLOBAL_CONSTANT_NAME"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"global_var_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"instance_var_name"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"function_parameter_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"local_var_name"),"."),(0,o.kt)("p",null,"Function names, variable names, and filenames should be descriptive; eschew\nabbreviation. In particular, do not use abbreviations that are ambiguous or\nunfamiliar to readers outside your project, and do not abbreviate by deleting\nletters within a word."),(0,o.kt)("p",null,"Always use a ",(0,o.kt)("inlineCode",{parentName:"p"},".py")," filename extension. Never use dashes."),(0,o.kt)("a",{id:"s3.16.1-names-to-avoid"}),(0,o.kt)("a",{id:"3161-names-to-avoid"}),(0,o.kt)("a",{id:"names-to-avoid"}),"#### 3.16.1 Names to Avoid",(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"single character names, except for specifically allowed cases:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"counters or iterators (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"i"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"j"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"k"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"v"),", et al.)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"e")," as an exception identifier in ",(0,o.kt)("inlineCode",{parentName:"li"},"try/except")," statements."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"f")," as a file handle in ",(0,o.kt)("inlineCode",{parentName:"li"},"with")," statements")),(0,o.kt)("p",{parentName:"li"},"Please be mindful not to abuse single-character naming. Generally speaking,\ndescriptiveness should be proportional to the name's scope of visibility.\nFor example, ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," might be a fine name for 5-line code block but within\nmultiple nested scopes, it is likely too vague.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"dashes (",(0,o.kt)("inlineCode",{parentName:"p"},"-"),") in any package/module name")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"__double_leading_and_trailing_underscore__")," names (reserved by Python)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"offensive terms")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"names that needlessly include the type of the variable (for example:\n",(0,o.kt)("inlineCode",{parentName:"p"},"id_to_name_dict"),")"))),(0,o.kt)("a",{id:"s3.16.2-naming-conventions"}),(0,o.kt)("a",{id:"3162-naming-convention"}),(0,o.kt)("a",{id:"naming-conventions"}),"#### 3.16.2 Naming Conventions",(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'"Internal" means internal to a module, or protected or private within a\nclass.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Prepending a single underscore (",(0,o.kt)("inlineCode",{parentName:"p"},"_"),") has some support for protecting module\nvariables and functions (linters will flag protected member access).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Prepending a double underscore (",(0,o.kt)("inlineCode",{parentName:"p"},"__"),' aka "dunder") to an instance variable\nor method effectively makes the variable or method private to its class\n(using name mangling); we discourage its use as it impacts readability and\ntestability, and isn\'t ',(0,o.kt)("em",{parentName:"p"},"really")," private. Prefer a single underscore.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Place related classes and top-level functions together in a\nmodule.\nUnlike Java, there is no need to limit yourself to one class per module.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use CapWords for class names, but lower","_","with","_","under.py for module names.\nAlthough there are some old modules named CapWords.py, this is now\ndiscouraged because it's confusing when the module happens to be named after\na class. (\"wait -- did I write ",(0,o.kt)("inlineCode",{parentName:"p"},"import StringIO")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"from StringIO import\nStringIO"),'?")')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Underscores may appear in ",(0,o.kt)("em",{parentName:"p"},"unittest")," method names starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," to\nseparate logical components of the name, even if those components use\nCapWords. One possible pattern is ",(0,o.kt)("inlineCode",{parentName:"p"},"test<MethodUnderTest>_<state>"),"; for\nexample ",(0,o.kt)("inlineCode",{parentName:"p"},"testPop_EmptyStack")," is okay. There is no One Correct Way to name\ntest methods."))),(0,o.kt)("a",{id:"s3.16.3-file-naming"}),(0,o.kt)("a",{id:"3163-file-naming"}),(0,o.kt)("a",{id:"file-naming"}),"#### 3.16.3 File Naming",(0,o.kt)("p",null,"Python filenames must have a ",(0,o.kt)("inlineCode",{parentName:"p"},".py")," extension and must not contain dashes (",(0,o.kt)("inlineCode",{parentName:"p"},"-"),").\nThis allows them to be imported and unittested. If you want an executable to be\naccessible without the extension, use a symbolic link or a simple bash wrapper\ncontaining ",(0,o.kt)("inlineCode",{parentName:"p"},'exec "$0.py" "$@"'),"."),(0,o.kt)("a",{id:"s3.16.4-guidelines-derived-from-guidos-recommendations"}),(0,o.kt)("a",{id:"3164-guidelines-derived-from-guidos-recommendations"}),(0,o.kt)("a",{id:"guidelines-derived-from-guidos-recommendations"}),"#### 3.16.4 Guidelines derived from [Guido](https://en.wikipedia.org/wiki/Guido_van_Rossum)'s Recommendations",(0,o.kt)("table",{rules:"all",border:"1",summary:"Guidelines from Guido's Recommendations",cellspacing:"2",cellpadding:"2"},(0,o.kt)("tr",null,(0,o.kt)("th",null,"Type"),(0,o.kt)("th",null,"Public"),(0,o.kt)("th",null,"Internal")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Packages"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null)),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Modules"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_lower_with_under"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Classes"),(0,o.kt)("td",null,(0,o.kt)("code",null,"CapWords")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_CapWords"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Exceptions"),(0,o.kt)("td",null,(0,o.kt)("code",null,"CapWords")),(0,o.kt)("td",null)),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Functions"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under()")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_lower_with_under()"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Global/Class Constants"),(0,o.kt)("td",null,(0,o.kt)("code",null,"CAPS_WITH_UNDER")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_CAPS_WITH_UNDER"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Global/Class Variables"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_lower_with_under"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Instance Variables"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_lower_with_under")," (protected)")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Method Names"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under()")),(0,o.kt)("td",null,(0,o.kt)("code",null,"_lower_with_under()")," (protected)")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Function/Method Parameters"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null)),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Local Variables"),(0,o.kt)("td",null,(0,o.kt)("code",null,"lower_with_under")),(0,o.kt)("td",null))),(0,o.kt)("a",{id:"s3.17-main"}),(0,o.kt)("a",{id:"317-main"}),(0,o.kt)("a",{id:"math-notation"}),"#### 3.16.5 Mathematical Notation",(0,o.kt)("p",null,"For mathematically heavy code, short variable names that would otherwise violate\nthe style guide are preferred when they match established notation in a\nreference paper or algorithm. When doing so, reference the source of all naming\nconventions in a comment or docstring or, if the source is not accessible,\nclearly document the naming conventions. Prefer PEP8-compliant\n",(0,o.kt)("inlineCode",{parentName:"p"},"descriptive_names")," for public APIs, which are much more likely to be\nencountered out of context."),(0,o.kt)("a",{id:"main"}),"### 3.17 Main",(0,o.kt)("p",null,"In Python, ",(0,o.kt)("inlineCode",{parentName:"p"},"pydoc")," as well as unit tests require modules to be importable. If a\nfile is meant to be used as an executable, its main functionality should be in a\n",(0,o.kt)("inlineCode",{parentName:"p"},"main()")," function, and your code should always check ",(0,o.kt)("inlineCode",{parentName:"p"},"if __name__ == '__main__'"),"\nbefore executing your main program, so that it is not executed when the module\nis imported."),(0,o.kt)("p",null,"When using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/abseil/abseil-py"},"absl"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"app.run"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from absl import app\n...\n\ndef main(argv: Sequence[str]):\n    # process non-flag arguments\n    ...\n\nif __name__ == '__main__':\n    app.run(main)\n")),(0,o.kt)("p",null,"Otherwise, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def main():\n    ...\n\nif __name__ == '__main__':\n    main()\n")),(0,o.kt)("p",null,"All code at the top level will be executed when the module is imported. Be\ncareful not to call functions, create objects, or perform other operations that\nshould not be executed when the file is being ",(0,o.kt)("inlineCode",{parentName:"p"},"pydoc"),"ed."),(0,o.kt)("a",{id:"s3.18-function-length"}),(0,o.kt)("a",{id:"318-function-length"}),(0,o.kt)("a",{id:"function-length"}),"### 3.18 Function length",(0,o.kt)("p",null,"Prefer small and focused functions."),(0,o.kt)("p",null,"We recognize that long functions are sometimes appropriate, so no hard limit is\nplaced on function length. If a function exceeds about 40 lines, think about\nwhether it can be broken up without harming the structure of the program."),(0,o.kt)("p",null,"Even if your long function works perfectly now, someone modifying it in a few\nmonths may add new behavior. This could result in bugs that are hard to find.\nKeeping your functions short and simple makes it easier for other people to read\nand modify your code."),(0,o.kt)("p",null,"You could find long and complicated functions when working with\nsome\ncode. Do not be intimidated by modifying existing code: if working with such a\nfunction proves to be difficult, you find that errors are hard to debug, or you\nwant to use a piece of it in several different contexts, consider breaking up\nthe function into smaller and more manageable pieces."),(0,o.kt)("a",{id:"s3.19-type-annotations"}),(0,o.kt)("a",{id:"319-type-annotations"}),(0,o.kt)("a",{id:"type-annotations"}),"### 3.19 Type Annotations",(0,o.kt)("a",{id:"s3.19.1-general-rules"}),(0,o.kt)("a",{id:"s3.19.1-general"}),(0,o.kt)("a",{id:"3191-general-rules"}),(0,o.kt)("a",{id:"typing-general"}),"#### 3.19.1 General Rules",(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Familiarize yourself with\n",(0,o.kt)("a",{parentName:"li",href:"https://www.python.org/dev/peps/pep-0484/"},"PEP-484"),"."),(0,o.kt)("li",{parentName:"ul"},"In methods, only annotate ",(0,o.kt)("inlineCode",{parentName:"li"},"self"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"cls")," if it is necessary for proper\ntype information. e.g., ",(0,o.kt)("inlineCode",{parentName:"li"},"@classmethod def create(cls: Type[T]) -> T: return\ncls()")),(0,o.kt)("li",{parentName:"ul"},"If any other variable or a returned type should not be expressed, use ",(0,o.kt)("inlineCode",{parentName:"li"},"Any"),"."),(0,o.kt)("li",{parentName:"ul"},"You are not required to annotate all the functions in a module.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"At least annotate your public APIs."),(0,o.kt)("li",{parentName:"ul"},"Use judgment to get to a good balance between safety and clarity on the\none hand, and flexibility on the other."),(0,o.kt)("li",{parentName:"ul"},"Annotate code that is prone to type-related errors (previous bugs or\ncomplexity)."),(0,o.kt)("li",{parentName:"ul"},"Annotate code that is hard to understand."),(0,o.kt)("li",{parentName:"ul"},"Annotate code as it becomes stable from a types perspective. In many\ncases, you can annotate all the functions in mature code without losing\ntoo much flexibility.")))),(0,o.kt)("a",{id:"s3.19.2-line-breaking"}),(0,o.kt)("a",{id:"3192-line-breaking"}),(0,o.kt)("a",{id:"typing-line-breaking"}),"#### 3.19.2 Line Breaking",(0,o.kt)("p",null,"Try to follow the existing ",(0,o.kt)("a",{parentName:"p",href:"#indentation"},"indentation")," rules."),(0,o.kt)("p",null,'After annotating, many function signatures will become "one parameter per line".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def my_method(self,\n              first_var: int,\n              second_var: Foo,\n              third_var: Optional[Bar]) -> int:\n  ...\n")),(0,o.kt)("p",null,"Always prefer breaking between variables, and not, for example, between variable\nnames and type annotations. However, if everything fits on the same line, go for\nit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def my_method(self, first_var: int) -> int:\n  ...\n")),(0,o.kt)("p",null,"If the combination of the function name, the last parameter, and the return type\nis too long, indent by 4 in a new line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def my_method(\n    self, first_var: int) -> Tuple[MyLongType1, MyLongType1]:\n  ...\n")),(0,o.kt)("p",null,"When the return type does not fit on the same line as the last parameter, the\npreferred way is to indent the parameters by 4 on a new line and align the\nclosing parenthesis with the ",(0,o.kt)("inlineCode",{parentName:"p"},"def"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\ndef my_method(\n    self, other_arg: Optional[MyLongType]\n) -> Dict[OtherLongType, MyLongType]:\n  ...\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pylint"),"\nallows you to move the closing parenthesis to a new line and align with the\nopening one, but this is less readable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\ndef my_method(self,\n              other_arg: Optional[MyLongType]\n             ) -> Dict[OtherLongType, MyLongType]:\n  ...\n")),(0,o.kt)("p",null,"As in the examples above, prefer not to break types. However, sometimes they are\ntoo long to be on a single line (try to keep sub-types unbroken)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def my_method(\n    self,\n    first_var: Tuple[List[MyLongType1],\n                     List[MyLongType2]],\n    second_var: List[Dict[\n        MyLongType3, MyLongType4]]) -> None:\n  ...\n")),(0,o.kt)("p",null,"If a single name and type is too long, consider using an\n",(0,o.kt)("a",{parentName:"p",href:"#typing-aliases"},"alias")," for the type. The last resort is to break after the\ncolon and indent by 4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\ndef my_function(\n    long_variable_name:\n        long_module_name.LongTypeName,\n) -> None:\n  ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\ndef my_function(\n    long_variable_name: long_module_name.\n        LongTypeName,\n) -> None:\n  ...\n")),(0,o.kt)("a",{id:"s3.19.3-forward-declarations"}),(0,o.kt)("a",{id:"3193-forward-declarations"}),(0,o.kt)("a",{id:"forward-declarations"}),"#### 3.19.3 Forward Declarations",(0,o.kt)("p",null,"If you need to use a class name from the same module that is not yet defined --\nfor example, if you need the class inside the class declaration, or if you use a\nclass that is defined below -- use a string for the class name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class MyClass:\n\n  def __init__(self,\n               stack: List["MyClass"]) -> None:\n')),(0,o.kt)("a",{id:"s3.19.4-default-values"}),(0,o.kt)("a",{id:"3194-default-values"}),(0,o.kt)("a",{id:"typing-default-values"}),"#### 3.19.4 Default Values",(0,o.kt)("p",null,"As per\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0008/#other-recommendations"},"PEP-008"),", use\nspaces around the ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," ",(0,o.kt)("em",{parentName:"p"},"only")," for arguments that have both a type annotation and\na default value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\ndef func(a: int = 0) -> int:\n  ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\ndef func(a:int=0) -> int:\n  ...\n")),(0,o.kt)("a",{id:"s3.19.5-nonetype"}),(0,o.kt)("a",{id:"s3.19.5-none-type"}),(0,o.kt)("a",{id:"3195-nonetype"}),(0,o.kt)("a",{id:"none-type"}),"#### 3.19.5 NoneType",(0,o.kt)("p",null,"In the Python type system, ",(0,o.kt)("inlineCode",{parentName:"p"},"NoneType"),' is a "first class" type, and for typing\npurposes, ',(0,o.kt)("inlineCode",{parentName:"p"},"None")," is an alias for ",(0,o.kt)("inlineCode",{parentName:"p"},"NoneType"),". If an argument can be ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", it\nhas to be declared! You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Union"),", but if there is only one other type,\nuse ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional"),"."),(0,o.kt)("p",null,"Use explicit ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional")," instead of implicit ",(0,o.kt)("inlineCode",{parentName:"p"},"Optional"),". Earlier versions of PEP\n484 allowed ",(0,o.kt)("inlineCode",{parentName:"p"},"a: str = None")," to be interpreted as ",(0,o.kt)("inlineCode",{parentName:"p"},"a: Optional[str] = None"),", but\nthat is no longer the preferred behavior."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Yes:\ndef func(a: Optional[str], b: Optional[str] = None) -> str:\n  ...\ndef multiple_nullable_union(a: Union[None, str, int]) -> str:\n  ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"No:\ndef nullable_union(a: Union[None, str]) -> str:\n  ...\ndef implicit_optional(a: str = None) -> str:\n  ...\n")),(0,o.kt)("a",{id:"s3.19.6-type-aliases"}),(0,o.kt)("a",{id:"s3.19.6-aliases"}),(0,o.kt)("a",{id:"3196-type-aliases"}),(0,o.kt)("a",{id:"typing-aliases"}),(0,o.kt)("a",{id:"type-aliases"}),"#### 3.19.6 Type Aliases",(0,o.kt)("p",null,"You can declare aliases of complex types. The name of an alias should be\nCapWorded. If the alias is used only in this module, it should be ","_","Private."),(0,o.kt)("p",null,"For example, if the name of the module together with the name of the type is too\nlong:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"_ShortName = module_with_long_name.TypeWithLongName\nComplexMap = Mapping[str, List[Tuple[int, int]]]\n")),(0,o.kt)("p",null,"Other examples are complex nested types and multiple return variables from a\nfunction (as a tuple)."),(0,o.kt)("a",{id:"s3.19.7-ignoring-types"}),(0,o.kt)("a",{id:"s3.19.7-ignore"}),(0,o.kt)("a",{id:"3197-ignoring-types"}),(0,o.kt)("a",{id:"typing-ignore"}),"#### 3.19.7 Ignoring Types",(0,o.kt)("p",null,"You can disable type checking on a line with the special comment ",(0,o.kt)("inlineCode",{parentName:"p"},"# type:\nignore"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pytype")," has a disable option for specific errors (similar to lint):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# pytype: disable=attribute-error\n")),(0,o.kt)("a",{id:"s3.19.8-typing-variables"}),(0,o.kt)("a",{id:"s3.19.8-comments"}),(0,o.kt)("a",{id:"3198-typing-internal-variables"}),(0,o.kt)("a",{id:"typing-variables"}),"#### 3.19.8 Typing Variables",(0,o.kt)("p",null,"If an internal variable has a type that is hard or impossible to infer, you can\nspecify its type in a couple ways."),(0,o.kt)("a",{id:"type-comments"}),"[*Type Comments:*](#type-comments) :   Use a `# type:` comment on the end of the line",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a = SomeUndecoratedFunction()  # type: Foo\n")),(0,o.kt)("a",{id:"annotated-assignments"}),"[*Annotated Assignments*](#annotated-assignments) :   Use a colon and type between the variable name and value, as with function arguments.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"a: Foo = SomeUndecoratedFunction()\n")),(0,o.kt)("a",{id:"s3.19.9-tuples-vs-lists"}),(0,o.kt)("a",{id:"s3.19.9-tuples"}),(0,o.kt)("a",{id:"3199-tuples-vs-lists"}),(0,o.kt)("a",{id:"typing-tuples"}),"#### 3.19.9 Tuples vs Lists",(0,o.kt)("p",null,"Typed lists can only contain objects of a single type. Typed tuples can either\nhave a single repeated type or a set number of elements with different types.\nThe latter is commonly used as the return type from a function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'a = [1, 2, 3]  # type: List[int]\nb = (1, 2, 3)  # type: Tuple[int, ...]\nc = (1, "2", 3.5)  # type: Tuple[int, str, float]\n')),(0,o.kt)("a",{id:"s3.19.10-typevars"}),(0,o.kt)("a",{id:"s3.19.10-type-var"}),(0,o.kt)("a",{id:"31910-typevar"}),(0,o.kt)("a",{id:"typing-type-var"}),(0,o.kt)("a",{id:"typevars"}),"#### 3.19.10 TypeVars",(0,o.kt)("p",null,"The Python type system has\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0484/#generics"},"generics"),". The factory\nfunction ",(0,o.kt)("inlineCode",{parentName:"p"},"TypeVar")," is a common way to use them."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List, TypeVar\nT = TypeVar("T")\n...\ndef next(l: List[T]) -> T:\n  return l.pop()\n')),(0,o.kt)("p",null,"A TypeVar can be constrained:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'AddableType = TypeVar("AddableType", int, float, str)\ndef add(a: AddableType, b: AddableType) -> AddableType:\n  return a + b\n')),(0,o.kt)("p",null,"A common predefined type variable in the ",(0,o.kt)("inlineCode",{parentName:"p"},"typing")," module is ",(0,o.kt)("inlineCode",{parentName:"p"},"AnyStr"),". Use it for\nmultiple annotations that can be ",(0,o.kt)("inlineCode",{parentName:"p"},"bytes")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"unicode")," and must all be the same\ntype."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import AnyStr\ndef check_length(x: AnyStr) -> AnyStr:\n  if len(x) <= 42:\n    return x\n  raise ValueError()\n")),(0,o.kt)("a",{id:"s3.19.11-string-types"}),(0,o.kt)("a",{id:"s3.19.11-strings"}),(0,o.kt)("a",{id:"31911-string-types"}),(0,o.kt)("a",{id:"typing-strings"}),"#### 3.19.11 String types",(0,o.kt)("p",null,"The proper type for annotating strings depends on what versions of Python the\ncode is intended for."),(0,o.kt)("p",null,"Prefer to use ",(0,o.kt)("inlineCode",{parentName:"p"},"str"),", though ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," is also acceptable. Be consistent in using\none or the other. For code that deals with binary data, use ",(0,o.kt)("inlineCode",{parentName:"p"},"bytes"),". For Python\n2 compatible code that processes text data (",(0,o.kt)("inlineCode",{parentName:"p"},"str")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"unicode")," in Python 2,\n",(0,o.kt)("inlineCode",{parentName:"p"},"str")," in Python 3), use ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def deals_with_text_data_in_py3(x: str) -> str:\n  ...\ndef deals_with_binary_data(x: bytes) -> bytes:\n  ...\ndef py2_compatible_text_data_processor(x: Text) -> Text:\n  ...\n")),(0,o.kt)("p",null,"In some uncommon Python 2 compatibility cases, ",(0,o.kt)("inlineCode",{parentName:"p"},"str")," may make sense instead of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),", typically to aid compatibility when the return types aren't the same\nbetween Python 2 and Python 3. Never use ",(0,o.kt)("inlineCode",{parentName:"p"},"unicode")," as it doesn't exist in Python\n3. The reason this discrepancy exists is because ",(0,o.kt)("inlineCode",{parentName:"p"},"str")," means something different\nin Python 2 than in Python 3."),(0,o.kt)("p",null,"No:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def py2_code(x: str) -> unicode:\n  ...\n")),(0,o.kt)("p",null,"If the type can be either bytes or text, use ",(0,o.kt)("inlineCode",{parentName:"p"},"Union"),", with the appropriate text\ntype."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Text, Union\n...\ndef py3_only(x: Union[bytes, str]) -> Union[bytes, str]:\n  ...\ndef py2_compatible(x: Union[bytes, Text]) -> Union[bytes, Text]:\n  ...\n")),(0,o.kt)("p",null,"If all the string types of a function are always the same, for example if the\nreturn type is the same as the argument type in the code above, use\n",(0,o.kt)("a",{parentName:"p",href:"#typing-type-var"},"AnyStr"),"."),(0,o.kt)("a",{id:"s3.19.12-imports-for-typing"}),(0,o.kt)("a",{id:"s3.19.12-imports"}),(0,o.kt)("a",{id:"31912-imports-for-typing"}),(0,o.kt)("a",{id:"typing-imports"}),"#### 3.19.12 Imports For Typing",(0,o.kt)("p",null,"For classes from the ",(0,o.kt)("inlineCode",{parentName:"p"},"typing")," module, always import the class itself. You are\nexplicitly allowed to import multiple specific classes on one line from the\n",(0,o.kt)("inlineCode",{parentName:"p"},"typing")," module. Ex:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Any, Dict, Optional\n")),(0,o.kt)("p",null,"Given that this way of importing from ",(0,o.kt)("inlineCode",{parentName:"p"},"typing")," adds items to the local\nnamespace, any names in ",(0,o.kt)("inlineCode",{parentName:"p"},"typing")," should be treated similarly to keywords, and\nnot be defined in your Python code, typed or not. If there is a collision\nbetween a type and an existing name in a module, import it using ",(0,o.kt)("inlineCode",{parentName:"p"},"import x as\ny"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Any as AnyType\n")),(0,o.kt)("a",{id:"s3.19.13-conditional-imports"}),(0,o.kt)("a",{id:"31913-conditional-imports"}),(0,o.kt)("a",{id:"typing-conditional-imports"}),"#### 3.19.13 Conditional Imports",(0,o.kt)("p",null,"Use conditional imports only in exceptional cases where the additional imports\nneeded for type checking must be avoided at runtime. This pattern is\ndiscouraged; alternatives such as refactoring the code to allow top level\nimports should be preferred."),(0,o.kt)("p",null,"Imports that are needed only for type annotations can be placed within an ",(0,o.kt)("inlineCode",{parentName:"p"},"if\nTYPE_CHECKING:")," block."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Conditionally imported types need to be referenced as strings, to be forward\ncompatible with Python 3.6 where the annotation expressions are actually\nevaluated."),(0,o.kt)("li",{parentName:"ul"},"Only entities that are used solely for typing should be defined here; this\nincludes aliases. Otherwise it will be a runtime error, as the module will\nnot be imported at runtime."),(0,o.kt)("li",{parentName:"ul"},"The block should be right after all the normal imports."),(0,o.kt)("li",{parentName:"ul"},"There should be no empty lines in the typing imports list."),(0,o.kt)("li",{parentName:"ul"},"Sort this list as if it were a regular imports list.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import typing\nif typing.TYPE_CHECKING:\n  import sketch\ndef f(x: "sketch.Sketch"): ...\n')),(0,o.kt)("a",{id:"s3.19.14-circular-dependencies"}),(0,o.kt)("a",{id:"s3.19.14-circular-deps"}),(0,o.kt)("a",{id:"31914-circular-dependencies"}),(0,o.kt)("a",{id:"typing-circular-deps"}),"#### 3.19.14 Circular Dependencies",(0,o.kt)("p",null,"Circular dependencies that are caused by typing are code smells. Such code is a\ngood candidate for refactoring. Although technically it is possible to keep\ncircular dependencies, various build systems will not let you do so\nbecause each module has to depend on the other."),(0,o.kt)("p",null,"Replace modules that create circular dependency imports with ",(0,o.kt)("inlineCode",{parentName:"p"},"Any"),". Set an\n",(0,o.kt)("a",{parentName:"p",href:"#typing-aliases"},"alias")," with a meaningful name, and use the real type name from\nthis module (any attribute of Any is Any). Alias definitions should be separated\nfrom the last import by one line."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from typing import Any\n\nsome_mod = Any  # some_mod.py imports this module.\n...\n\ndef my_method(self, var: "some_mod.SomeType") -> None:\n  ...\n')),(0,o.kt)("a",{id:"typing-generics"}),(0,o.kt)("a",{id:"s3.19.15-generics"}),(0,o.kt)("a",{id:"31915-generics"}),(0,o.kt)("a",{id:"generics"}),"#### 3.19.15 Generics",(0,o.kt)("p",null,"When annotating, prefer to specify type parameters for generic types; otherwise,\n",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0484/#the-any-type"},"the generics' parameters will be assumed to be ",(0,o.kt)("inlineCode",{parentName:"a"},"Any")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_names(employee_ids: List[int]) -> Dict[int, Any]:\n  ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# These are both interpreted as get_names(employee_ids: List[Any]) -> Dict[Any, Any]\ndef get_names(employee_ids: list) -> Dict:\n  ...\n\ndef get_names(employee_ids: List) -> Dict:\n  ...\n")),(0,o.kt)("p",null,"If the best type parameter for a generic is ",(0,o.kt)("inlineCode",{parentName:"p"},"Any"),", make it explicit, but\nremember that in many cases ",(0,o.kt)("a",{parentName:"p",href:"#typing-type-var"},(0,o.kt)("inlineCode",{parentName:"a"},"TypeVar"))," might be more\nappropriate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def get_names(employee_ids: List[Any]) -> Dict[Any, str]:\n  """Returns a mapping from employee ID to employee name for given IDs."""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'T = TypeVar(\'T\')\ndef get_names(employee_ids: List[T]) -> Dict[T, str]:\n  """Returns a mapping from employee ID to employee name for given IDs."""\n')),(0,o.kt)("a",{id:"4-parting-words"}),(0,o.kt)("a",{id:"consistency"}),"## 4 Parting Words",(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"BE CONSISTENT"),"."),(0,o.kt)("p",null,"If you're editing code, take a few minutes to look at the code around you and\ndetermine its style. If they use spaces around all their arithmetic operators,\nyou should too. If their comments have little boxes of hash marks around them,\nmake your comments have little boxes of hash marks around them too."),(0,o.kt)("p",null,"The point of having style guidelines is to have a common vocabulary of coding so\npeople can concentrate on what you're saying rather than on how you're saying\nit. We present global style rules here so people know the vocabulary, but local\nstyle is also important. If code you add to a file looks drastically different\nfrom the existing code around it, it throws readers out of their rhythm when\nthey go to read it. Avoid this."))}u.isMDXComponent=!0}}]);